<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>求索</title>
  
  <subtitle>尔不必求记，却宜求个明白！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.xiemx.com/"/>
  <updated>2020-01-21T09:08:08.899Z</updated>
  <id>https://www.xiemx.com/</id>
  
  <author>
    <name>Mingxu.xie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>k8s pod lifecycle</title>
    <link href="https://www.xiemx.com//2020/01/21/k8s-pod-lifecycle/"/>
    <id>https://www.xiemx.com//2020/01/21/k8s-pod-lifecycle/</id>
    <published>2020-01-21T09:08:14.000Z</published>
    <updated>2020-01-21T09:08:08.899Z</updated>
    
    <content type="html"><![CDATA[<h4 id="pod-phase"><a href="#pod-phase" class="headerlink" title="pod phase"></a>pod phase</h4><hr><ul><li>pending:  Pod 已被 Kubernetes 系统接受，但有一个或者多个容器镜像尚未创建。等待时间包括调度 Pod 的时间和通过网络下载镜像</li><li>running: 该 Pod 已经绑定到了一个节点上，Pod 中所有的容器都已被创建。至少有一个容器正在运行，或者正处于启动或重启状态。</li><li>successed: Pod 中的所有容器都被成功终止，并且不会再重启。</li><li>Failed: Pod 中的所有容器都已终止了，并且至少有一个容器是因为失败终止。也就是说，容器以非0状态退出或者被系统终止。</li><li>unkown: 某些原因无法取得 Pod 的状态，通常是因为与 Pod 所在主机通信失败。</li></ul><h4 id="探针"><a href="#探针" class="headerlink" title="探针"></a>探针</h4><hr><ul><li><code>livenessProbe</code>：指示容器是否正在运行。如果存活探测失败，则 kubelet 会杀死容器，并且容器将受到其 <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy" target="_blank" rel="noopener">重启策略</a> 的影响。如果容器不提供存活探针，则默认状态为 <code>Success</code>。</li><li><code>readinessProbe</code>：指示容器是否准备好服务请求。如果就绪探测失败，端点控制器将从与 Pod 匹配的所有 Service 的端点中删除该 Pod 的 IP 地址。初始延迟之前的就绪状态默认为 <code>Failure</code>。如果容器不提供就绪探针，则默认状态为 <code>Success</code>。</li><li>探针支持的3种action事件<ul><li><a href="https://kubernetes.io/docs/resources-reference/v1.7/#execaction-v1-core" target="_blank" rel="noopener">ExecAction</a>：在容器内执行指定命令。如果命令退出时返回码为 0 则认为诊断成功。</li><li><a href="https://kubernetes.io/docs/resources-reference/v1.7/#tcpsocketaction-v1-core" target="_blank" rel="noopener">TCPSocketAction</a>：对指定端口上的容器的 IP 地址进行 TCP 检查。如果端口打开，则诊断被认为是成功的。</li><li><a href="https://kubernetes.io/docs/resources-reference/v1.7/#httpgetaction-v1-core" target="_blank" rel="noopener">HTTPGetAction</a>：对指定的端口和路径上的容器的 IP 地址执行 HTTP Get 请求。如果响应的状态码大于等于200 且小于 400，则诊断被认为是成功的。</li></ul></li></ul><h4 id="restart-policy"><a href="#restart-policy" class="headerlink" title="restart policy"></a>restart policy</h4><hr><ul><li>pod的spec中restartPolicy 有三种模式<pre><code>* Always* Never* OnFailure</code></pre></li><li>job 的spec中有2种<ul><li>OnFailure</li><li>Never</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;pod-phase&quot;&gt;&lt;a href=&quot;#pod-phase&quot; class=&quot;headerlink&quot; title=&quot;pod phase&quot;&gt;&lt;/a&gt;pod phase&lt;/h4&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;pending:  Pod 已被 Kubernetes 系统接
      
    
    </summary>
    
    
      <category term="k8s" scheme="https://www.xiemx.com/categories/k8s/"/>
    
    
      <category term="k8s" scheme="https://www.xiemx.com/tags/k8s/"/>
    
      <category term="pod" scheme="https://www.xiemx.com/tags/pod/"/>
    
  </entry>
  
  <entry>
    <title>aws-vpc-cni</title>
    <link href="https://www.xiemx.com//2020/01/21/aws-vpc-cni/"/>
    <id>https://www.xiemx.com//2020/01/21/aws-vpc-cni/</id>
    <published>2020-01-21T09:05:04.000Z</published>
    <updated>2020-01-21T09:05:25.527Z</updated>
    
    <content type="html"><![CDATA[<h3 id="aws-vpc-cni"><a href="#aws-vpc-cni" class="headerlink" title="aws-vpc-cni"></a>aws-vpc-cni</h3><p>详细信息可以参考一下aws的提案</p><p>总结如下：</p><ol><li>AWS EKS运行在vpc中，因此所有节点能够运行的总pod数最终由vpc cidr中能够使用的ip地址数量来决定。</li><li>EKS node能够运行的pod数量，由node上的secendary ip数量决定，secendary ip是由eni的数量来决定的，可以理解不同的机型能够attach的eni数量决定了，node上能够运行多少pod。</li><li>pod使用cni来通讯，减少了中间网络层的封包/解包，网络性能上比较高。</li><li>aws-vpc-cni由两个部分组成<ol><li>Aws-vpc-cni 会在机器上嵌入一个进程<code>L-ipadm</code> 来管理pod的IP分配，eni的绑定和申请，ip pool的管理等等工作</li><li>cni plugin负责网络层的数据调度</li></ol></li></ol><hr><p>aws 提案：<a href="https://github.com/aws/amazon-vpc-cni-k8s/blob/master/docs/cni-proposal.md" target="_blank" rel="noopener">https://github.com/aws/amazon-vpc-cni-k8s/blob/master/docs/cni-proposal.md</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;aws-vpc-cni&quot;&gt;&lt;a href=&quot;#aws-vpc-cni&quot; class=&quot;headerlink&quot; title=&quot;aws-vpc-cni&quot;&gt;&lt;/a&gt;aws-vpc-cni&lt;/h3&gt;&lt;p&gt;详细信息可以参考一下aws的提案&lt;/p&gt;
&lt;p&gt;总结如下：&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="k8s" scheme="https://www.xiemx.com/categories/k8s/"/>
    
    
      <category term="aws" scheme="https://www.xiemx.com/tags/aws/"/>
    
      <category term="k8s" scheme="https://www.xiemx.com/tags/k8s/"/>
    
      <category term="network" scheme="https://www.xiemx.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>linux network namespace and bridge</title>
    <link href="https://www.xiemx.com//2020/01/21/linux-network-namespace/"/>
    <id>https://www.xiemx.com//2020/01/21/linux-network-namespace/</id>
    <published>2020-01-21T05:09:52.000Z</published>
    <updated>2020-01-21T08:56:26.914Z</updated>
    
    <content type="html"><![CDATA[<h3 id="linux-netns-和-bridge"><a href="#linux-netns-和-bridge" class="headerlink" title="linux netns 和 bridge"></a>linux netns 和 bridge</h3><h4 id="netns"><a href="#netns" class="headerlink" title="netns"></a>netns</h4><hr><p>最近在学习k8s网络，看到权威指南中有讲到基础网络的实现，故而搬运一下重新学习network namespace的隔离技术，默认binary是放在iproute2这个套件中的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vagrant@ubuntu-xenial:~$ apt-file search $(which ip)</span><br><span class="line">cups-ipp-utils: /usr/sbin/ippserver</span><br><span class="line">freeipa-client: /usr/sbin/ipa-certupdate</span><br><span class="line">freeipa-client: /usr/sbin/ipa-client-automount</span><br><span class="line">freeipa-client: /usr/sbin/ipa-client-install</span><br><span class="line">freeipa-client: /usr/sbin/ipa-getkeytab</span><br><span class="line">freeipa-client: /usr/sbin/ipa-join</span><br><span class="line">freeipa-client: /usr/sbin/ipa-rmkeytab</span><br><span class="line">iproute2: /sbin/ip</span><br></pre></td></tr></table></figure><p>默认情况下，使用 <code>ip netns</code> 是没有网络 namespace 的，所以 <code>ip netns ls</code> 命令看不到任何输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vagrant@ubuntu-xenial:~$ ip netns <span class="built_in">help</span></span><br><span class="line">Usage: ip netns list</span><br><span class="line">       ip netns add NAME</span><br><span class="line">       ip netns <span class="built_in">set</span> NAME NETNSID</span><br><span class="line">       ip [-all] netns delete [NAME]</span><br><span class="line">       ip netns identify [PID]</span><br><span class="line">       ip netns pids NAME</span><br><span class="line">       ip [-all] netns <span class="built_in">exec</span> [NAME] cmd ...</span><br><span class="line">       ip netns monitor</span><br><span class="line">       ip netns list-id</span><br></pre></td></tr></table></figure><p>新创建的 netns 会在<code>/var/run/netns/</code> 目录中生存对应名称的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vagrant@ubuntu-xenial:~$ sudo ip netns add xiemx1</span><br><span class="line">vagrant@ubuntu-xenial:~$ sudo ip netns add xiemx2</span><br><span class="line">vagrant@ubuntu-xenial:~$ sudo ip netns ls</span><br><span class="line">xiemx2</span><br><span class="line">xiemx1</span><br><span class="line">vagrant@ubuntu-xenial:~$ ll /var/run/netns/</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  2 root root   80 Jan 21 03:19 ./</span><br><span class="line">drwxr-xr-x 28 root root 1140 Jan 21 03:19 ../</span><br><span class="line">-r--r--r--  1 root root    0 Jan 21 03:19 xiemx1</span><br><span class="line">-r--r--r--  1 root root    0 Jan 21 03:19 xiemx2</span><br></pre></td></tr></table></figure><p>由于netns 之间互相都是隔离的，因此要查看对应命名空间的网络设备、路由表就需要使用 <code>ip netns exec &lt;netns name&gt; bash</code>  开启子bash进入对应的命名空间，也可以直接执行命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">vagrant@ubuntu-xenial:~$ sudo<span class="built_in"> ip </span>a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN<span class="built_in"> group default </span>qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP<span class="built_in"> group default </span>qlen 1000</span><br><span class="line">    link/ether 02:97:71:8a:f0:d8 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.2.15/24 brd 10.0.2.255 scope global enp0s3</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::97:71ff:fe8a:f0d8/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: enp0s8: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP<span class="built_in"> group default </span>qlen 1000</span><br><span class="line">    link/ether 08:00:27:f1:22:f6 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.110.120.65/24 brd 10.110.120.255 scope global enp0s8</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::a00:27ff:fef1:22f6/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN<span class="built_in"> group </span>default</span><br><span class="line">    link/ether 02:42:da:5a:39:42 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line">vagrant@ubuntu-xenial:~$ sudo<span class="built_in"> ip </span>net exec xiemx1<span class="built_in"> ip </span>a</span><br><span class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN<span class="built_in"> group default </span>qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    </span><br><span class="line">vagrant@ubuntu-xenial:~$ sudo<span class="built_in"> ip </span>net exec xiemx2<span class="built_in"> ip </span>a</span><br><span class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN<span class="built_in"> group default </span>qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br></pre></td></tr></table></figure><p>每个 namespace 在创建的时候会自动创建一个 <code>lo</code> ，默认时DOWN状态，如果需要启用记得UP一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vagrant@ubuntu-xenial:~$ sudo ip net <span class="built_in">exec</span> xiemx1 ip a</span><br><span class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">vagrant@ubuntu-xenial:~$ sudo ip netns <span class="built_in">exec</span> xiemx1 ip link <span class="built_in">set</span> lo up</span><br><span class="line">vagrant@ubuntu-xenial:~$ sudo ip netns <span class="built_in">exec</span> xiemx1 ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><h4 id="veth-pair"><a href="#veth-pair" class="headerlink" title="veth pair"></a>veth pair</h4><hr><p>netns 之间是相互隔离的，linux 提供了 <code>veth</code> 设备对来实现不同netns之间的往来通讯，veth 设备是成对出现的，类似于一根网线插到了两个隔离的ns之中，实现了两个隔离网络的互联。</p><p>我们可以使用 <code>ip link add &lt;name1&gt; type veth peer name &lt;name2&gt;</code> 来创建一对 veth pair 出来，需要记住的是 veth pair 无法单独存在，删除其中一个，另一个也会自动消失。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">vagrant@ubuntu-xenial:~$ sudo<span class="built_in"> ip </span>netns exec xiemx1 bash</span><br><span class="line">root@ubuntu-xenial:~#<span class="built_in"> ip </span>add</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN<span class="built_in"> group default </span>qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">root@ubuntu-xenial:~#<span class="built_in"> ip </span>link <span class="builtin-name">add</span> xiemx-veth1<span class="built_in"> type </span>veth<span class="built_in"> peer </span>name xiemx-veth2</span><br><span class="line">root@ubuntu-xenial:~#<span class="built_in"> ip </span>add</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN<span class="built_in"> group default </span>qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: xiemx-veth2@xiemx-veth1: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN<span class="built_in"> group default </span>qlen 1000</span><br><span class="line">    link/ether a6:76:6f:47:e1:f9 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">5: xiemx-veth1@xiemx-veth2: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN<span class="built_in"> group default </span>qlen 1000</span><br><span class="line">    link/ether 42:6a:cb:19:0d:2a brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    </span><br><span class="line"><span class="comment">####如果对名称没有特别要求可以使用默认命令创建，会默认生存veth0/veth1 的设备对</span></span><br><span class="line">root@ubuntu-xenial:~#<span class="built_in"> ip </span>link <span class="builtin-name">add</span><span class="built_in"> type </span>veth</span><br><span class="line">root@ubuntu-xenial:~#<span class="built_in"> ip </span>add</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN<span class="built_in"> group default </span>qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: xiemx-veth2@xiemx-veth1: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN<span class="built_in"> group default </span>qlen 1000</span><br><span class="line">    link/ether a6:76:6f:47:e1:f9 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">5: xiemx-veth1@xiemx-veth2: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN<span class="built_in"> group default </span>qlen 1000</span><br><span class="line">    link/ether 42:6a:cb:19:0d:2a brd ff:ff:ff:ff:ff:ff</span><br><span class="line">6: veth0@veth1: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN<span class="built_in"> group default </span>qlen 1000</span><br><span class="line">    link/ether 3e:72:e3:48:25:69 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">7: veth1@veth0: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN<span class="built_in"> group default </span>qlen 1000</span><br><span class="line">    link/ether ea:37:ea:92:a5:c5 brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure><p>给这对 veth pair 配置上 ip 地址，并up</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-xenial:~#<span class="built_in"> ip </span>netns exec xiemx1 bash</span><br><span class="line">root@ubuntu-xenial:~#<span class="built_in"> ip </span><span class="builtin-name">add</span> <span class="builtin-name">add</span> 10.0.0.1/24 dev xiemx-veth1</span><br><span class="line">root@ubuntu-xenial:~#<span class="built_in"> ip </span><span class="builtin-name">add</span> <span class="builtin-name">add</span> 10.0.0.2/24 dev xiemx-veth2</span><br><span class="line">root@ubuntu-xenial:~#<span class="built_in"> ip </span><span class="builtin-name">add</span> show dev xiemx-veth1 up</span><br><span class="line">root@ubuntu-xenial:~#<span class="built_in"> ip </span><span class="builtin-name">add</span> show dev xiemx-veth2 up</span><br><span class="line">root@ubuntu-xenial:~#<span class="built_in"> ip </span>add</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN<span class="built_in"> group default </span>qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: xiemx-veth2@xiemx-veth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP<span class="built_in"> group default </span>qlen 1000</span><br><span class="line">    link/ether a6:76:6f:47:e1:f9 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.0.2/24 scope global xiemx-veth2</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::a476:6fff:fe47:e1f9/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">5: xiemx-veth1@xiemx-veth2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP<span class="built_in"> group default </span>qlen 1000</span><br><span class="line">    link/ether 42:6a:cb:19:0d:2a brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.0.1/24 scope global xiemx-veth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::406a:cbff:fe19:d2a/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">6: veth0@veth1: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN<span class="built_in"> group default </span>qlen 1000</span><br><span class="line">    link/ether 3e:72:e3:48:25:69 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">7: veth1@veth0: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN<span class="built_in"> group default </span>qlen 1000</span><br><span class="line">    link/ether ea:37:ea:92:a5:c5 brd ff:ff:ff:ff:ff:ff</span><br><span class="line"></span><br><span class="line">root@ubuntu-xenial:~#<span class="built_in"> ip </span>route</span><br><span class="line">10.0.0.0/24 dev xiemx-veth1  proto kernel  scope link  src 10.0.0.1</span><br><span class="line">10.0.0.0/24 dev xiemx-veth2  proto kernel  scope link  src 10.0.0.2</span><br></pre></td></tr></table></figure><p>目前所有的veth pair的两端都在xiemx1这个netns 中，现在移动设备的一段到xiemx2 这个netns中，实现网络互联</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-xenial:~#<span class="built_in"> ip </span>link <span class="builtin-name">set</span> xiemx-veth2 netns xiemx2</span><br><span class="line">root@ubuntu-xenial:~#<span class="built_in"> ip </span>add</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN<span class="built_in"> group default </span>qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">5: xiemx-veth1@if4: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state LOWERLAYERDOWN<span class="built_in"> group default </span>qlen 1000</span><br><span class="line">    link/ether 42:6a:cb:19:0d:2a brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 10.0.0.1/24 scope global xiemx-veth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::406a:cbff:fe19:d2a/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">6: veth0@veth1: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN<span class="built_in"> group default </span>qlen 1000</span><br><span class="line">    link/ether 3e:72:e3:48:25:69 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">7: veth1@veth0: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN<span class="built_in"> group default </span>qlen 1000</span><br><span class="line">    link/ether ea:37:ea:92:a5:c5 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">root@ubuntu-xenial:~#<span class="built_in"> ip </span>netns exec xiemx2<span class="built_in"> ip </span>add</span><br><span class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN<span class="built_in"> group default </span>qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">4: xiemx-veth2@if5: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN<span class="built_in"> group default </span>qlen 1000</span><br><span class="line">    link/ether a6:76:6f:47:e1:f9 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">root@ubuntu-xenial:~#<span class="built_in"> ip </span>netns exec xiemx2 ifconfig xiemx-veth2 up</span><br><span class="line">root@ubuntu-xenial:~#<span class="built_in"> ip </span>netns exec xiemx2<span class="built_in"> ip </span>add</span><br><span class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN<span class="built_in"> group default </span>qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">4: xiemx-veth2@if5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP<span class="built_in"> group default </span>qlen 1000</span><br><span class="line">    link/ether a6:76:6f:47:e1:f9 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet6 fe80::a476:6fff:fe47:e1f9/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">root@ubuntu-xenial:~#<span class="built_in"> ip </span>netns exec xiemx2<span class="built_in"> ip </span><span class="builtin-name">add</span> <span class="builtin-name">add</span> 10.0.0.2/24 dev xiemx-veth2</span><br><span class="line">root@ubuntu-xenial:~#<span class="built_in"> ip </span>netns exec xiemx2<span class="built_in"> ip </span>add</span><br><span class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN<span class="built_in"> group default </span>qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">4: xiemx-veth2@if5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP<span class="built_in"> group default </span>qlen 1000</span><br><span class="line">    link/ether a6:76:6f:47:e1:f9 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 10.0.0.2/24 scope global xiemx-veth2</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::a476:6fff:fe47:e1f9/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">root@ubuntu-xenial:~#<span class="built_in"> ping </span>10.0.0.2</span><br><span class="line">PING 10.0.0.2 (10.0.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes <span class="keyword">from</span> 10.0.0.2: <span class="attribute">icmp_seq</span>=1 <span class="attribute">ttl</span>=64 <span class="attribute">time</span>=0.083 ms</span><br><span class="line">64 bytes <span class="keyword">from</span> 10.0.0.2: <span class="attribute">icmp_seq</span>=2 <span class="attribute">ttl</span>=64 <span class="attribute">time</span>=0.046 ms</span><br><span class="line">^C</span><br><span class="line">--- 10.0.0.2<span class="built_in"> ping </span>statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 999ms</span><br><span class="line">rtt min/avg/max/mdev = 0.046/0.064/0.083/0.020 ms</span><br></pre></td></tr></table></figure><h4 id="bridge"><a href="#bridge" class="headerlink" title="bridge"></a>bridge</h4><hr><p>linux 内核支持网口桥接，但是和传统的硬件网桥不同的是，linux 中的网桥设备不仅仅是二层设备，只是对报文进行转发，由于Linux 主机上运行的上层应用有可能就是报文的终点，因此还要求网桥能够将保数据包传递给linux网络协议栈。</p><p>Docker bridge的网络就可以看成是通过bridge 来讲veth的设备对一端进行聚合，另一端放到容器的进程中，实现网络隔离和网络互联。再通过iptables的数据包转发功能来传递数据包，这里不讨论iptables层面的问题。</p><p>手动模拟一下大概如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##增加一个网桥（假设是docker bridge)</span></span></span><br><span class="line">root@ubuntu-xenial:~# ip netns exec xiemx1 bash</span><br><span class="line">root@ubuntu-xenial:~# brctl  show</span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">root@ubuntu-xenial:~# brctl addbr xiemx-br</span><br><span class="line">root@ubuntu-xenial:~# brctl show</span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">xiemx-br8000.000000000000no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##将veth设备的一端绑定到网桥上，由于使用网桥进行通讯，所以veth设备在这里只需要当成二层设备来使用，不需要IP</span></span></span><br><span class="line">root@ubuntu-xenial:~# brctl addif xiemx-br veth0</span><br><span class="line">root@ubuntu-xenial:~# brctl show</span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">xiemx-br8000.3e72e3482569noveth0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##将veth的另一端移动到另一个netns中，可以理解为容器内的eth0</span></span></span><br><span class="line">root@ubuntu-xenial:~# ip link set veth1 netns xiemx2</span><br><span class="line">root@ubuntu-xenial:~# ip add</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">5: xiemx-veth1@if4: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    link/ether 42:6a:cb:19:0d:2a brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 10.0.0.1/24 scope global xiemx-veth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::406a:cbff:fe19:d2a/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">6: veth0@if7: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop master xiemx-br state DOWN group default qlen 1000</span><br><span class="line">    link/ether 3e:72:e3:48:25:69 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">8: xiemx-br: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default qlen 1000</span><br><span class="line">    link/ether 3e:72:e3:48:25:69 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 11.0.0.1/24 brd 11.0.0.255 scope global xiemx-br</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line">root@ubuntu-xenial:~# ip netns exec xiemx2 bash</span><br><span class="line">root@ubuntu-xenial:~# ip add</span><br><span class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">4: xiemx-veth2@if5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    link/ether a6:76:6f:47:e1:f9 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 10.0.0.2/24 scope global xiemx-veth2</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::a476:6fff:fe47:e1f9/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">7: veth1@if6: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000</span><br><span class="line">    link/ether ea:37:ea:92:a5:c5 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 给veth1 分配ip 地址，并开启设备</span></span></span><br><span class="line">root@ubuntu-xenial:~# ip add add 11.0.0.2/24 dev veth1</span><br><span class="line">root@ubuntu-xenial:~# ifconfig veth1 up</span><br><span class="line">root@ubuntu-xenial:~# ip add</span><br><span class="line">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">4: xiemx-veth2@if5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    link/ether a6:76:6f:47:e1:f9 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 10.0.0.2/24 scope global xiemx-veth2</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::a476:6fff:fe47:e1f9/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">7: veth1@if6: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state LOWERLAYERDOWN group default qlen 1000</span><br><span class="line">    link/ether ea:37:ea:92:a5:c5 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 11.0.0.2/24 scope global veth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 给网桥分配IP，并开启veth0设备</span></span></span><br><span class="line">root@ubuntu-xenial:~# ip netns exec xiemx1 bash</span><br><span class="line">root@ubuntu-xenial:~# ifconfig xiemx-br 11.0.0.1/24</span><br><span class="line">root@ubuntu-xenial:~# ifconfig veth0 up</span><br><span class="line">root@ubuntu-xenial:~# ip add</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">5: xiemx-veth1@if4: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    link/ether 42:6a:cb:19:0d:2a brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 10.0.0.1/24 scope global xiemx-veth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::406a:cbff:fe19:d2a/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">6: veth0@if7: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master xiemx-br state UP group default qlen 1000</span><br><span class="line">    link/ether 3e:72:e3:48:25:69 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet6 fe80::3c72:e3ff:fe48:2569/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">8: xiemx-br: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    link/ether 3e:72:e3:48:25:69 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 11.0.0.1/24 brd 11.0.0.255 scope global xiemx-br</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::3c72:e3ff:fe48:2569/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 测试网络联通</span></span></span><br><span class="line">root@ubuntu-xenial:~# ping 11.0.0.2</span><br><span class="line">PING 11.0.0.2 (11.0.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 11.0.0.2: icmp_seq=1 ttl=64 time=0.244 ms</span><br><span class="line">64 bytes from 11.0.0.2: icmp_seq=2 ttl=64 time=0.047 ms</span><br><span class="line">64 bytes from 11.0.0.2: icmp_seq=3 ttl=64 time=0.048 ms</span><br><span class="line">64 bytes from 11.0.0.2: icmp_seq=4 ttl=64 time=0.047 ms</span><br><span class="line">64 bytes from 11.0.0.2: icmp_seq=5 ttl=64 time=0.051 ms</span><br><span class="line">^C</span><br><span class="line">--- 11.0.0.2 ping statistics ---</span><br><span class="line">5 packets transmitted, 5 received, 0% packet loss, time 4005ms</span><br><span class="line">rtt min/avg/max/mdev = 0.047/0.087/0.244/0.078 ms</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;linux-netns-和-bridge&quot;&gt;&lt;a href=&quot;#linux-netns-和-bridge&quot; class=&quot;headerlink&quot; title=&quot;linux netns 和 bridge&quot;&gt;&lt;/a&gt;linux netns 和 bridge&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
      <category term="linux" scheme="https://www.xiemx.com/categories/linux/"/>
    
    
      <category term="linux" scheme="https://www.xiemx.com/tags/linux/"/>
    
      <category term="network" scheme="https://www.xiemx.com/tags/network/"/>
    
      <category term="docker" scheme="https://www.xiemx.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>k8s Flannel</title>
    <link href="https://www.xiemx.com//2020/01/21/k8s-fannel/"/>
    <id>https://www.xiemx.com//2020/01/21/k8s-fannel/</id>
    <published>2020-01-21T02:01:04.000Z</published>
    <updated>2020-01-21T09:03:57.654Z</updated>
    
    <content type="html"><![CDATA[<h4 id="K8S-Flannel"><a href="#K8S-Flannel" class="headerlink" title="K8S Flannel"></a>K8S Flannel</h4><p>Flannel 的网络个人理解为，flannel接管了所有k8s node节点上的docker 网络的配置，在docker 启动之前，flannel通过在etcd 中共享 flannel的subnet等网段信息来给每个node的docker 预设网络信息，以及分配子网段和bridge地址，以保证在分布式的环境下不会出现网络冲突，因此flannel 可以看作是侵入了docker层面，在底层系统启动container的时候就处理了网络相关，构建了一个大内网。在宿主机的docker控制了所有节点的bridge，并更新所有node上的网段信息的对应路由表，在同一个大网段内，来保证网络连通性。</p><hr><p>以下配置参考信息转自：<a href="https://jimmysong.io/kubernetes-handbook/concepts/flannel.html" target="_blank" rel="noopener">https://jimmysong.io/kubernetes-handbook/concepts/flannel.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># kubectl get nodes -o wide</span></span><br><span class="line">NAME      STATUS    ROLES     AGE       VERSION   EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION               CONTAINER-RUNTIME</span><br><span class="line">node1     Ready     &lt;none&gt;    2d        v1.9.1    &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-693.11.6.el7.x86_64   docker://1.12.6</span><br><span class="line">node2     Ready     &lt;none&gt;    2d        v1.9.1    &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-693.11.6.el7.x86_64   docker://1.12.6</span><br><span class="line">node3     Ready     &lt;none&gt;    2d        v1.9.1    &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-693.11.6.el7.x86_64   docker://1.12.6</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>当前Kubernetes集群中运行的所有Pod信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># kubectl get pods --all-namespaces -o wide</span></span><br><span class="line">NAMESPACE     NAME                                              READY     STATUS    RESTARTS   AGE       IP            NODE</span><br><span class="line">kube-system   coredns-5984fb8cbb-sjqv9                          1/1       Running   0          1h        172.33.68.2   node1</span><br><span class="line">kube-system   coredns-5984fb8cbb-tkfrc                          1/1       Running   1          1h        172.33.96.3   node3</span><br><span class="line">kube-system   heapster-v1.5.0-684c7f9488-z6sdz                  4/4       Running   0          1h        172.33.31.3   node2</span><br><span class="line">kube-system   kubernetes-dashboard-6b66b8b96c-mnm2c             1/1       Running   0          1h        172.33.31.2   node2</span><br><span class="line">kube-system   monitoring-influxdb-grafana-v4-54b7854697-tw9cd   2/2       Running   2          1h        172.33.96.2   node3</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>当前etcd中的注册的宿主机的pod地址网段信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># etcdctl ls /kube-centos/network/subnets</span></span><br><span class="line">/kube-centos/network/subnets/172.33.68.0-24</span><br><span class="line">/kube-centos/network/subnets/172.33.31.0-24</span><br><span class="line">/kube-centos/network/subnets/172.33.96.0-24</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>而每个node上的Pod子网是根据我们在安装flannel时配置来划分的，在etcd中查看该配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># etcdctl get /kube-centos/network/config</span></span><br><span class="line">&#123;<span class="string">"Network"</span>:<span class="string">"172.33.0.0/16"</span>,<span class="string">"SubnetLen"</span>:24,<span class="string">"Backend"</span>:&#123;<span class="string">"Type"</span>:<span class="string">"host-gw"</span>&#125;&#125;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>我们知道Kubernetes集群内部存在三类IP，分别是：</p><ul><li>Node IP：宿主机的IP地址</li><li>Pod IP：使用网络插件创建的IP（如flannel），使跨主机的Pod可以互通</li><li>Cluster IP：虚拟IP，通过iptables规则访问服务</li></ul><p>在安装node节点的时候，节点上的进程是按照flannel -&gt; docker -&gt; kubelet -&gt; kube-proxy的顺序启动的，我们下面也会按照该顺序来讲解，flannel的网络划分和如何与docker交互，如何通过iptables访问service。</p><h3 id="Flannel"><a href="#Flannel" class="headerlink" title="Flannel"></a>Flannel</h3><p>Flannel是作为一个二进制文件的方式部署在每个node上，主要实现两个功能：</p><ul><li>为每个node分配subnet，容器将自动从该子网中获取IP地址</li><li>当有node加入到网络中时，为每个node增加路由配置</li></ul><p>下面是使用<code>host-gw</code> backend的flannel网络架构图：</p><p><a href="https://jimmysong.io/kubernetes-handbook/images/flannel-networking.png" target="_blank" rel="noopener"><img src="../images/flannel-networking-20200121145349208.png" alt="flannel网络架构（图片来自openshift）"></a>图片 - flannel网络架构（图片来自openshift）。以上IP非本示例中的IP。</p><p>Node1上的flannel配置如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># cat /usr/lib/systemd/system/flanneld.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Flanneld overlay address etcd agent</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=etcd.service</span><br><span class="line">Before=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=/etc/sysconfig/flanneld</span><br><span class="line">EnvironmentFile=-/etc/sysconfig/docker-network</span><br><span class="line">ExecStart=/usr/bin/flanneld-start <span class="variable">$FLANNEL_OPTIONS</span></span><br><span class="line">ExecStartPost=/usr/libexec/flannel/mk-docker-opts.sh -k DOCKER_NETWORK_OPTIONS -d /run/flannel/docker</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">RequiredBy=docker.service</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>其中有两个环境变量文件的配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># cat /etc/sysconfig/flanneld</span></span><br><span class="line"><span class="comment"># Flanneld configuration options</span></span><br><span class="line">FLANNEL_ETCD_ENDPOINTS=<span class="string">"http://172.17.8.101:2379"</span></span><br><span class="line">FLANNEL_ETCD_PREFIX=<span class="string">"/kube-centos/network"</span></span><br><span class="line">FLANNEL_OPTIONS=<span class="string">"-iface=eth2"</span></span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>上面的配置文件仅供flanneld使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># cat /etc/sysconfig/docker-network</span></span><br><span class="line"><span class="comment"># /etc/sysconfig/docker-network</span></span><br><span class="line">DOCKER_NETWORK_OPTIONS=</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>还有一个<code>ExecStartPost=/usr/libexec/flannel/mk-docker-opts.sh -k DOCKER_NETWORK_OPTIONS -d /run/flannel/docker</code>，其中的<code>/usr/libexec/flannel/mk-docker-opts.sh</code>脚本是在flanneld启动后运行，将会生成两个环境变量配置文件：</p><ul><li>/run/flannel/docker</li><li>/run/flannel/subnet.env</li></ul><p>我们再来看下<code>/run/flannel/docker</code>的配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># cat /run/flannel/docker</span></span><br><span class="line">DOCKER_OPT_BIP=<span class="string">"--bip=172.33.68.1/24"</span></span><br><span class="line">DOCKER_OPT_IPMASQ=<span class="string">"--ip-masq=true"</span></span><br><span class="line">DOCKER_OPT_MTU=<span class="string">"--mtu=1500"</span></span><br><span class="line">DOCKER_NETWORK_OPTIONS=<span class="string">" --bip=172.33.68.1/24 --ip-masq=true --mtu=1500"</span></span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>如果你使用<code>systemctl</code>命令先启动flannel后启动docker的话，docker将会读取以上环境变量。</p><p>我们再来看下<code>/run/flannel/subnet.env</code>的配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># cat /run/flannel/subnet.env</span></span><br><span class="line">FLANNEL_NETWORK=172.33.0.0/16</span><br><span class="line">FLANNEL_SUBNET=172.33.68.1/24</span><br><span class="line">FLANNEL_MTU=1500</span><br><span class="line">FLANNEL_IPMASQ=<span class="literal">false</span></span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>以上环境变量是flannel向etcd中注册的。</p><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>Node1的docker配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># cat /usr/lib/systemd/system/docker.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=http://docs.docker.com</span><br><span class="line">After=network.target rhel-push-plugin.socket registries.service</span><br><span class="line">Wants=docker-storage-setup.service</span><br><span class="line">Requires=docker-cleanup.timer</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">NotifyAccess=all</span><br><span class="line">EnvironmentFile=-/run/containers/registries.conf</span><br><span class="line">EnvironmentFile=-/etc/sysconfig/docker</span><br><span class="line">EnvironmentFile=-/etc/sysconfig/docker-storage</span><br><span class="line">EnvironmentFile=-/etc/sysconfig/docker-network</span><br><span class="line">Environment=GOTRACEBACK=crash</span><br><span class="line">Environment=DOCKER_HTTP_HOST_COMPAT=1</span><br><span class="line">Environment=PATH=/usr/libexec/docker:/usr/bin:/usr/sbin</span><br><span class="line">ExecStart=/usr/bin/dockerd-current \</span><br><span class="line">          --add-runtime docker-runc=/usr/libexec/docker/docker-runc-current \</span><br><span class="line">          --default-runtime=docker-runc \</span><br><span class="line">          --<span class="built_in">exec</span>-opt native.cgroupdriver=systemd \</span><br><span class="line">          --userland-proxy-path=/usr/libexec/docker/docker-proxy-current \</span><br><span class="line">          <span class="variable">$OPTIONS</span> \</span><br><span class="line">          <span class="variable">$DOCKER_STORAGE_OPTIONS</span> \</span><br><span class="line">          <span class="variable">$DOCKER_NETWORK_OPTIONS</span> \</span><br><span class="line">          <span class="variable">$ADD_REGISTRY</span> \</span><br><span class="line">          <span class="variable">$BLOCK_REGISTRY</span> \</span><br><span class="line">          <span class="variable">$INSECURE_REGISTRY</span>\</span><br><span class="line">          <span class="variable">$REGISTRIES</span></span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">LimitNOFILE=1048576</span><br><span class="line">LimitNPROC=1048576</span><br><span class="line">LimitCORE=infinity</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">Restart=on-abnormal</span><br><span class="line">MountFlags=slave</span><br><span class="line">KillMode=process</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>查看Node1上的docker启动参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># systemctl status -l docker</span></span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled)</span><br><span class="line">  Drop-In: /usr/lib/systemd/system/docker.service.d</span><br><span class="line">           └─flannel.conf</span><br><span class="line">   Active: active (running) since Fri 2018-02-02 22:52:43 CST; 2h 28min ago</span><br><span class="line">     Docs: http://docs.docker.com</span><br><span class="line"> Main PID: 4334 (dockerd-current)</span><br><span class="line">   CGroup: /system.slice/docker.service</span><br><span class="line">           ‣ 4334 /usr/bin/dockerd-current --add-runtime docker-runc=/usr/libexec/docker/docker-runc-current --default-runtime=docker-runc --<span class="built_in">exec</span>-opt native.cgroupdriver=systemd --userland-proxy-path=/usr/libexec/docker/docker-proxy-current --selinux-enabled --<span class="built_in">log</span>-driver=journald --signature-verification=<span class="literal">false</span> --bip=172.33.68.1/24 --ip-masq=<span class="literal">true</span> --mtu=1500</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>我们可以看到在docker在启动时有如下参数：<code>--bip=172.33.68.1/24 --ip-masq=true --mtu=1500</code>。上述参数flannel启动时运行的脚本生成的，通过环境变量传递过来的。</p><p>我们查看下node1宿主机上的网络接口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class="line">    link/ether 52:54:00:00:57:32 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.2.15/24 brd 10.0.2.255 scope global dynamic eth0</span><br><span class="line">       valid_lft 85095sec preferred_lft 85095sec</span><br><span class="line">    inet6 fe80::5054:ff:fe00:5732/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class="line">    link/ether 08:00:27:7b:0f:b1 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.8.101/24 brd 172.17.8.255 scope global eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: eth2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class="line">    link/ether 08:00:27:ef:25:06 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.30.113.231/21 brd 172.30.119.255 scope global dynamic eth2</span><br><span class="line">       valid_lft 85096sec preferred_lft 85096sec</span><br><span class="line">    inet6 fe80::a00:27ff:feef:2506/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">5: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP</span><br><span class="line">    link/ether 02:42:d0:ae:80:ea brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.33.68.1/24 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:d0ff:feae:80ea/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">7: veth295bef2@if6: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP</span><br><span class="line">    link/ether 6a:72:d7:9f:29:19 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet6 fe80::6872:d7ff:fe9f:2919/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>我们分类来解释下该虚拟机中的网络接口。</p><ul><li><p>lo：回环网络，127.0.0.1</p></li><li><p>eth0：NAT网络，虚拟机创建时自动分配，仅可以在几台虚拟机之间访问</p></li><li><p>eth1：bridge网络，使用vagrant分配给虚拟机的地址，虚拟机之间和本地电脑都可以访问</p></li><li><p>eth2：bridge网络，使用DHCP分配，用于访问互联网的网卡</p></li><li><p>docker0：bridge网络，docker默认使用的网卡，作为该节点上所有容器的虚拟交换机</p></li><li><p>veth295bef2@if6：veth pair，连接docker0和Pod中的容器。veth pair可以理解为使用网线连接好的两个接口，把两个端口放到两个namespace中，那么这两个namespace就能打通。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">940bb75e653b        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">d94c046e105d        host                host                <span class="built_in">local</span></span><br><span class="line">2db7597fd546        none                null                <span class="built_in">local</span></span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>再检查下bridge网络<code>940bb75e653b</code>的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># docker network inspect 940bb75e653b</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"bridge"</span>,</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"940bb75e653bfa10dab4cce8813c2b3ce17501e4e4935f7dc13805a61b732d2c"</span>,</span><br><span class="line">        <span class="string">"Scope"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"bridge"</span>,</span><br><span class="line">        <span class="string">"EnableIPv6"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"IPAM"</span>: &#123;</span><br><span class="line">            <span class="string">"Driver"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="string">"Options"</span>: null,</span><br><span class="line">            <span class="string">"Config"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"Subnet"</span>: <span class="string">"172.33.68.1/24"</span>,</span><br><span class="line">                    <span class="string">"Gateway"</span>: <span class="string">"172.33.68.1"</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Internal"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Containers"</span>: &#123;</span><br><span class="line">            <span class="string">"944d4aa660e30e1be9a18d30c9dcfa3b0504d1e5dbd00f3004b76582f1c9a85b"</span>: &#123;</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"k8s_POD_coredns-5984fb8cbb-sjqv9_kube-system_c5a2e959-082a-11e8-b4cd-525400005732_0"</span>,</span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"7397d7282e464fc4ec5756d6b328df889cdf46134dbbe3753517e175d3844a85"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:21:44:02"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"172.33.68.2/24"</span>,</span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Options"</span>: &#123;</span><br><span class="line">            <span class="string">"com.docker.network.bridge.default_bridge"</span>: <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.enable_icc"</span>: <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.enable_ip_masquerade"</span>: <span class="string">"true"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.host_binding_ipv4"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.bridge.name"</span>: <span class="string">"docker0"</span>,</span><br><span class="line">            <span class="string">"com.docker.network.driver.mtu"</span>: <span class="string">"1500"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Labels"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>我们可以看到该网络中的<code>Config</code>与docker的启动配置相符。</p><p>Node1上运行的容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE                                                                                               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">a37407a234dd        docker.io/coredns/coredns@sha256:adf2e5b4504ef9ffa43f16010bd064273338759e92f6f616dd159115748799bc   <span class="string">"/coredns -conf /etc/"</span>   About an hour ago   Up About an hour                        k8s_coredns_coredns-5984fb8cbb-sjqv9_kube-system_c5a2e959-082a-11e8-b4cd-525400005732_0</span><br><span class="line">944d4aa660e3        docker.io/openshift/origin-pod                                                                      <span class="string">"/usr/bin/pod"</span>           About an hour ago   Up About an hour                        k8s_POD_coredns-5984fb8cbb-sjqv9_kube-system_c5a2e959-082a-11e8-b4cd-525400005732_0</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>我们可以看到当前已经有2个容器在运行。</p><p>Node1上的路由信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         10.0.2.2        0.0.0.0         UG    100    0        0 eth0</span><br><span class="line">0.0.0.0         172.30.116.1    0.0.0.0         UG    101    0        0 eth2</span><br><span class="line">10.0.2.0        0.0.0.0         255.255.255.0   U     100    0        0 eth0</span><br><span class="line">172.17.8.0      0.0.0.0         255.255.255.0   U     100    0        0 eth1</span><br><span class="line">172.30.112.0    0.0.0.0         255.255.248.0   U     100    0        0 eth2</span><br><span class="line">172.33.68.0     0.0.0.0         255.255.255.0   U     0      0        0 docker0</span><br><span class="line">172.33.96.0     172.3.65   255.255.255.0   UG    0      0        0 eth2</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>以上路由信息是由flannel添加的，当有新的节点加入到Kubernetes集群中后，每个节点上的路由表都将增加。</p><p>我们在node上来<code>traceroute</code>下node3上的<code>coredns-5984fb8cbb-tkfrc</code>容器，其IP地址是<code>172.33.96.3</code>，看看其路由信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># traceroute 172.33.96.3</span></span><br><span class="line">traceroute to 172.33.96.3 (172.33.96.3), 30 hops max, 60 byte packets</span><br><span class="line"> 1  172.30.118.65 (172.30.118.65)  0.518 ms  0.367 ms  0.398 ms</span><br><span class="line"> 2  172.33.96.3 (172.33.96.3)  0.451 ms  0.352 ms  0.223 ms</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>我们看到路由直接经过node3的公网IP后就到达了node3节点上的Pod。</p><p>Node1的iptables信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># iptables -L</span></span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line">KUBE-FIREWALL  all  --  anywhere             anywhere</span><br><span class="line">KUBE-SERVICES  all  --  anywhere             anywhere             /* kubernetes service portals */</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line">KUBE-FORWARD  all  --  anywhere             anywhere             /* kubernetes forward rules */</span><br><span class="line">DOCKER-ISOLATION  all  --  anywhere             anywhere</span><br><span class="line">DOCKER     all  --  anywhere             anywhere</span><br><span class="line">ACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED</span><br><span class="line">ACCEPT     all  --  anywhere             anywhere</span><br><span class="line">ACCEPT     all  --  anywhere             anywhere</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line">KUBE-FIREWALL  all  --  anywhere             anywhere</span><br><span class="line">KUBE-SERVICES  all  --  anywhere             anywhere             /* kubernetes service portals */</span><br><span class="line"></span><br><span class="line">Chain DOCKER (1 references)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain DOCKER-ISOLATION (1 references)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line">RETURN     all  --  anywhere             anywhere</span><br><span class="line"></span><br><span class="line">Chain KUBE-FIREWALL (2 references)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line">DROP       all  --  anywhere             anywhere             /* kubernetes firewall <span class="keyword">for</span> dropping marked packets */ mark match 0x8000/0x8000</span><br><span class="line"></span><br><span class="line">Chain KUBE-FORWARD (1 references)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line">ACCEPT     all  --  anywhere             anywhere             /* kubernetes forwarding rules */ mark match 0x4000/0x4000</span><br><span class="line">ACCEPT     all  --  10.254.0.0/16        anywhere             /* kubernetes forwarding conntrack pod <span class="built_in">source</span> rule */ ctstate RELATED,ESTABLISHED</span><br><span class="line">ACCEPT     all  --  anywhere             10.254.0.0/16        /* kubernetes forwarding conntrack pod destination rule */ ctstate RELATED,ESTABLISHED</span><br><span class="line"></span><br><span class="line">Chain KUBE-SERVICES (2 references)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;K8S-Flannel&quot;&gt;&lt;a href=&quot;#K8S-Flannel&quot; class=&quot;headerlink&quot; title=&quot;K8S Flannel&quot;&gt;&lt;/a&gt;K8S Flannel&lt;/h4&gt;&lt;p&gt;Flannel 的网络个人理解为，flannel接管了所有k8s n
      
    
    </summary>
    
    
      <category term="k8s" scheme="https://www.xiemx.com/categories/k8s/"/>
    
    
      <category term="k8s" scheme="https://www.xiemx.com/tags/k8s/"/>
    
      <category term="network" scheme="https://www.xiemx.com/tags/network/"/>
    
      <category term="flannel" scheme="https://www.xiemx.com/tags/flannel/"/>
    
  </entry>
  
  <entry>
    <title>k8s pause container</title>
    <link href="https://www.xiemx.com//2020/01/20/k8s-pause-container/"/>
    <id>https://www.xiemx.com//2020/01/20/k8s-pause-container/</id>
    <published>2020-01-20T04:01:52.000Z</published>
    <updated>2020-01-21T09:02:31.436Z</updated>
    
    <content type="html"><![CDATA[<h3 id="pause-container"><a href="#pause-container" class="headerlink" title="pause container"></a>pause container</h3><p>Pause容器，也被称为infra容器，kubelet 启动是可以通过参数指定image<code>--pod-infra-container-image=gcr.io/google_containers/pause-amd64:3.0</code> </p><p>在Unix系统中，PID为1的进程为init进程，即所有进程的父进程。它会维护一张进程表，不断地检查进程状态，来管理子进程。init 不会响应系统信号，可以防止init进程被误杀。</p><p>pause容器的架构图：</p><p><img src="/images/pause_container.png" alt="The pause container"></p><p>kubernetes中的pause容器的功能：</p><ul><li>创建命名空间基础，给予后续容器使用</li><li>创建init进程作为父进程来接管后续容器的进程，保证进程安全和回收</li></ul><hr><p>参考：<a href="https://www.ianlewis.org/en/almighty-pause-container" target="_blank" rel="noopener">https://www.ianlewis.org/en/almighty-pause-container</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;pause-container&quot;&gt;&lt;a href=&quot;#pause-container&quot; class=&quot;headerlink&quot; title=&quot;pause container&quot;&gt;&lt;/a&gt;pause container&lt;/h3&gt;&lt;p&gt;Pause容器，也被称为infra容
      
    
    </summary>
    
    
      <category term="k8s" scheme="https://www.xiemx.com/categories/k8s/"/>
    
    
      <category term="k8s" scheme="https://www.xiemx.com/tags/k8s/"/>
    
      <category term="docker" scheme="https://www.xiemx.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Nginx URI参数%xx字符解码</title>
    <link href="https://www.xiemx.com//2020/01/09/nginx-decode-uri/"/>
    <id>https://www.xiemx.com//2020/01/09/nginx-decode-uri/</id>
    <published>2020-01-09T06:32:04.000Z</published>
    <updated>2020-01-09T06:32:20.152Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Nginx-URI参数-xx字符解码"><a href="#Nginx-URI参数-xx字符解码" class="headerlink" title="Nginx URI参数%xx字符解码"></a>Nginx URI参数%xx字符解码</h4><p>对URI参数值中的<code>%XX</code>这样的编码序列进行解码，可以使用第三方 <code>ngx_set_misc</code> 模块提供的 <code>set_unescape_uri</code> 指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    location /decode &#123;</span><br><span class="line">        set_unescape_uri <span class="variable">$name</span> <span class="variable">$arg_name</span>;</span><br><span class="line">        set_unescape_uri <span class="variable">$class</span> <span class="variable">$arg_class</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"name: <span class="variable">$name</span>"</span>;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"class: <span class="variable">$class</span>"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /<span class="built_in">test</span> &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"name: <span class="variable">$arg_name</span>"</span>;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"class: <span class="variable">$arg_class</span>"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ curl <span class="string">'http://localhost/test?name=hello%20xiemx&amp;class=1'</span></span><br><span class="line">name: hello%20xiemx</span><br><span class="line">class: 1</span><br><span class="line"></span><br><span class="line">$ curl <span class="string">'http://localhost/decode?name=hello%20xiemx&amp;class=1'</span></span><br><span class="line">name: hello xiemx</span><br><span class="line">class: 1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Nginx-URI参数-xx字符解码&quot;&gt;&lt;a href=&quot;#Nginx-URI参数-xx字符解码&quot; class=&quot;headerlink&quot; title=&quot;Nginx URI参数%xx字符解码&quot;&gt;&lt;/a&gt;Nginx URI参数%xx字符解码&lt;/h4&gt;&lt;p&gt;对URI参数
      
    
    </summary>
    
    
      <category term="nginx" scheme="https://www.xiemx.com/categories/nginx/"/>
    
    
      <category term="webserver" scheme="https://www.xiemx.com/tags/webserver/"/>
    
      <category term="nginx" scheme="https://www.xiemx.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx remote_port为空</title>
    <link href="https://www.xiemx.com//2019/12/12/nginx-remote-port-is-null/"/>
    <id>https://www.xiemx.com//2019/12/12/nginx-remote-port-is-null/</id>
    <published>2019-12-12T02:01:04.000Z</published>
    <updated>2019-12-12T07:06:52.916Z</updated>
    
    <content type="html"><![CDATA[<h3 id="nginx-remote-port为空"><a href="#nginx-remote-port为空" class="headerlink" title="nginx remote_port为空"></a>nginx remote_port为空</h3><h4 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h4><p>由于网安要求记录用户请求来源端口到日志中，因此为了实现这个需求在log_format中增加了”ngx_remote_port: $remote_port”字段(如下)， 但实际日志系统中收录到的日志<code>ngx_remote_port:&quot;&quot;</code>为空</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">log_format json '&#123; <span class="string">"time"</span>: <span class="string">"<span class="variable">$time_iso8601</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_true_client_ip"</span>: <span class="string">"<span class="variable">$http_true_client_ip</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_x_real_ip"</span>: <span class="string">"<span class="variable">$http_x_real_ip</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_cdn_src_ip"</span>: <span class="string">"<span class="variable">$http_cdn_src_ip</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_geo_location_ip"</span>: <span class="string">"<span class="variable">$client_ip</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_remote_addr"</span>: <span class="string">"<span class="variable">$remote_addr</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_remote_port"</span>: <span class="string">"<span class="variable">$remote_port</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_x_user_site_proxy"</span>: <span class="string">"<span class="variable">$http_x_user_site_proxy</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_x_forwarded_for"</span>: <span class="string">"<span class="variable">$http_x_forwarded_for</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_host"</span>: <span class="string">"<span class="variable">$host</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_http_user_agent"</span>: <span class="string">"<span class="variable">$http_user_agent</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_body_bytes_sent"</span>: <span class="string">"<span class="variable">$body_bytes_sent</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_request_time"</span>: <span class="string">"<span class="variable">$request_time</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_upstream_response_time"</span>: <span class="string">"<span class="variable">$upstream_response_time</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_upstream_connect_time"</span>: <span class="string">"<span class="variable">$upstream_connect_time</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_upstream_header_time:"</span>: <span class="string">"<span class="variable">$upstream_header_time</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_upstream_addr"</span>: <span class="string">"<span class="variable">$upstream_addr</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_upstream_content_length"</span>: <span class="string">"<span class="variable">$sent_http_content_length</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_status_code"</span>: <span class="string">"<span class="variable">$status</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_scheme"</span>: <span class="string">"<span class="variable">$scheme</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_request_method"</span>: <span class="string">"<span class="variable">$request_method</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_request_uri"</span>: <span class="string">"<span class="variable">$request_uri</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_request"</span>: <span class="string">"<span class="variable">$request</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_http_referrer"</span>: <span class="string">"<span class="variable">$http_referer</span>"</span>  &#125;';</span><br></pre></td></tr></table></figure><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>由于$remote_port这个变量是nginx核心模块提供的，因此猜测是由第三方模块再次操作导致为空，经过测试发现通过proxy进来的请求remote_port为空，<br>而直接访问本地nginx的请求都能够正确获取port信息，对于以上2中情况的对比<br>怀疑是由于经过proxy之类的组建request header中有x-forworder-for的头，从而触发了realip 模块（这个怀疑没有具体验证），解决方案就是使用realip模块提供的变量’realip_remote_port’来记录来源port, 修改log_format</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">log_format json '&#123; <span class="string">"time"</span>: <span class="string">"<span class="variable">$time_iso8601</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_true_client_ip"</span>: <span class="string">"<span class="variable">$http_true_client_ip</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_x_real_ip"</span>: <span class="string">"<span class="variable">$http_x_real_ip</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_cdn_src_ip"</span>: <span class="string">"<span class="variable">$http_cdn_src_ip</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_geo_location_ip"</span>: <span class="string">"<span class="variable">$client_ip</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_remote_addr"</span>: <span class="string">"<span class="variable">$remote_addr</span>"</span>, '</span><br><span class="line">                    '<span class="string">"ngx_remote_port"</span>: <span class="string">"<span class="variable">$remote_port</span>"</span>, '</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;nginx-remote-port为空&quot;&gt;&lt;a href=&quot;#nginx-remote-port为空&quot; class=&quot;headerlink&quot; title=&quot;nginx remote_port为空&quot;&gt;&lt;/a&gt;nginx remote_port为空&lt;/h3&gt;&lt;h4 i
      
    
    </summary>
    
    
      <category term="nginx" scheme="https://www.xiemx.com/categories/nginx/"/>
    
    
      <category term="webserver" scheme="https://www.xiemx.com/tags/webserver/"/>
    
      <category term="nginx" scheme="https://www.xiemx.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>如何在K8S环境中抓POD的包</title>
    <link href="https://www.xiemx.com//2019/12/12/k8s-tcpdump/"/>
    <id>https://www.xiemx.com//2019/12/12/k8s-tcpdump/</id>
    <published>2019-12-12T02:01:04.000Z</published>
    <updated>2019-12-12T07:05:08.737Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何在K8S环境中抓POD的包"><a href="#如何在K8S环境中抓POD的包" class="headerlink" title="如何在K8S环境中抓POD的包"></a>如何在K8S环境中抓POD的包</h3><ol><li><p>kubectl get pod -o wide 获取pod所在的node信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  Documents kubectl get pod -o wide </span><br><span class="line">NAME                                                 READY   STATUS             RESTARTS   AGE   IP             NODE                                              NOMINATED NODE</span><br><span class="line">internal-nginx-ingress-controller-7fdf7f457d-bd59z   1/1     Running            0          42m   10.200.1.83    ip-10-200-1-202.ap-northeast-1.compute.internal   &lt;none&gt;</span><br><span class="line"></span><br><span class="line">2. kubectl describe pod/podname 获取pod的containid</span><br><span class="line">```shell</span><br><span class="line">➜  Documents k get pod -o jsonpath='&#123;.status.containerStatuses[*].containerID&#125;' internal-nginx-ingress-controller-7fdf7f457d-bd59z</span><br><span class="line">docker://ae9a6df60584e797e56cc64d0df02e64d7731a0d852026fab0a76c920c608cbe</span><br></pre></td></tr></table></figure></li><li><p>登陆node节点，找到container查看eth0网卡的ID</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ec2-user@ip-10-200-1-202 net]$ docker exec -it ae9a6df60584e797e56cc64d0df02e64d7731a0d852026fab0a76c920c608cbe cat /sys/class/net/eth0/iflink</span><br><span class="line">88</span><br></pre></td></tr></table></figure></li><li><p>宿主机上查询对应ID的网卡设备号</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[ec<span class="number">2</span>-user<span class="title">@ip-10-200-1-202</span> net]$ cd /sys/class/net<span class="comment">; for i in $(ls);do echo $i ;grep 88 $i/ifindex;done</span></span><br><span class="line"><span class="comment">eni0143b083c86</span></span><br><span class="line"><span class="comment">eni154a5470c40</span></span><br><span class="line"><span class="comment">eni1c162323f07</span></span><br><span class="line"><span class="comment">eni1d3e2ba2ce1</span></span><br><span class="line"><span class="comment">eni3fbceb3330b</span></span><br><span class="line"><span class="comment">eni457702aeb41</span></span><br><span class="line"><span class="comment">eni45f360a240e</span></span><br><span class="line"><span class="comment">eni50431e3a94f</span></span><br><span class="line"><span class="comment">eni619e29d4bac</span></span><br><span class="line"><span class="comment">eni66339821adf</span></span><br><span class="line"><span class="comment">eni6fe679d6356</span></span><br><span class="line"><span class="comment">eni79708a78f8b</span></span><br><span class="line"><span class="comment">eni7cc26b0b7d2</span></span><br><span class="line"><span class="comment">eni855ca0ba49b</span></span><br><span class="line"><span class="comment">eni8799376f27c</span></span><br><span class="line"><span class="comment">eni90208382a7b</span></span><br><span class="line"><span class="comment">eni909411bbf11</span></span><br><span class="line"><span class="comment">eni94c3d2bb833</span></span><br><span class="line"><span class="comment">enia14f5f7c3e9</span></span><br><span class="line"><span class="comment">enib70b44b2399</span></span><br><span class="line"><span class="comment">enic2ad9523b38 ###容器所属网卡</span></span><br><span class="line"><span class="comment">88</span></span><br><span class="line"><span class="comment">enid60e48c6616</span></span><br><span class="line"><span class="comment">enid8f13b5dd06</span></span><br><span class="line"><span class="comment">enida858799e91</span></span><br><span class="line"><span class="comment">enieee4f7696a1</span></span><br><span class="line"><span class="comment">enif0d5e81d420</span></span><br><span class="line"><span class="comment">eth0</span></span><br><span class="line"><span class="comment">eth1</span></span><br><span class="line"><span class="comment">lo</span></span><br></pre></td></tr></table></figure></li><li><p>tcpdump 抓包即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  ssh-keys git:(master) ✗ ssh -F ~/.matrix/jp/ssh.aux.config 10.200.1.202 -l ec2-user "sudo tcpdump -vvv -i enic2ad9523b38 tcp port 80 -w -" | wireshark -k -i -</span><br><span class="line">Warning: Permanently added '10.200.1.4' (ECDSA) to the list of known hosts.</span><br><span class="line">Warning: Permanently added '10.200.1.202' (ECDSA) to the list of known hosts.</span><br><span class="line">tcpdump: listening on eni86f5b593a42, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">tcpdump: pcap_loop: The interface went down</span><br><span class="line">7408 packets captured</span><br><span class="line">7408 packets received by filter</span><br><span class="line">0 packets dropped by kernel</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;如何在K8S环境中抓POD的包&quot;&gt;&lt;a href=&quot;#如何在K8S环境中抓POD的包&quot; class=&quot;headerlink&quot; title=&quot;如何在K8S环境中抓POD的包&quot;&gt;&lt;/a&gt;如何在K8S环境中抓POD的包&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;kubectl g
      
    
    </summary>
    
    
      <category term="k8s" scheme="https://www.xiemx.com/categories/k8s/"/>
    
    
      <category term="linux" scheme="https://www.xiemx.com/tags/linux/"/>
    
      <category term="k8s" scheme="https://www.xiemx.com/tags/k8s/"/>
    
      <category term="network" scheme="https://www.xiemx.com/tags/network/"/>
    
      <category term="tcpdump" scheme="https://www.xiemx.com/tags/tcpdump/"/>
    
  </entry>
  
  <entry>
    <title>k8s ingress-nginx动态balance实现解析</title>
    <link href="https://www.xiemx.com//2019/09/16/k8s-ingress-nginx/"/>
    <id>https://www.xiemx.com//2019/09/16/k8s-ingress-nginx/</id>
    <published>2019-09-15T23:09:52.000Z</published>
    <updated>2019-10-21T06:57:42.989Z</updated>
    
    <content type="html"><![CDATA[<p>只节选了比较关键的代码，删除了比较多的干扰项。纯属个人理解！！！</p><h4 id="1-初始化balancer-init-worker-，使用balancer-balance-动态获取"><a href="#1-初始化balancer-init-worker-，使用balancer-balance-动态获取" class="headerlink" title="1. 初始化balancer.init_worker()，使用balancer.balance()动态获取"></a>1. 初始化balancer.init_worker()，使用balancer.balance()动态获取</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">        lua_package_path <span class="string">"/etc/nginx/lua/?.lua;/etc/nginx/lua/vendor/?.lua;/usr/local/lib/lua/?.lua;;"</span>;</span><br><span class="line">        init_by_lua_block &#123;</span><br><span class="line">                ok, res = <span class="built_in">pcall</span>(<span class="built_in">require</span>, <span class="string">"configuration"</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        init_worker_by_lua_block &#123;</span><br><span class="line">                balancer.init_worker()  #####创建定时任务 ngx.timer.every(BACKENDS_SYNC_INTERVAL, sync_backends)</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">###upstream configure</span><br><span class="line">upstream upstream_balancer &#123;</span><br><span class="line">server <span class="number">0.0</span><span class="number">.0</span><span class="number">.1</span>; # placeholder</span><br><span class="line"></span><br><span class="line">balancer_by_lua_block &#123;</span><br><span class="line">balancer.balance()</span><br><span class="line">&#125;</span><br><span class="line">keepalive <span class="number">32</span>;</span><br><span class="line">keepalive_timeout  <span class="number">60</span>s;</span><br><span class="line">keepalive_requests <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-获取backend信息，balancer-init-worker"><a href="#2-获取backend信息，balancer-init-worker" class="headerlink" title="2. 获取backend信息，balancer.init_worker()"></a>2. 获取backend信息，balancer.init_worker()</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">####https://sourcegraph.com/github.com/kubernetes/ingress-nginx@dd0fe4b458cc5520f25eb8bba25bbe6f0c72ee98/-/blob/rootfs/etc/nginx/lua/balancer.lua?utm_source=share#L223</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> configuration = <span class="built_in">require</span>(<span class="string">"configuration"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_M.init_worker</span><span class="params">()</span></span></span><br><span class="line">  sync_backends() <span class="comment">-- when worker starts, sync backends without delay</span></span><br><span class="line">  <span class="keyword">local</span> _, err = ngx.timer.every(BACKENDS_SYNC_INTERVAL, sync_backends)</span><br><span class="line">  <span class="keyword">if</span> err <span class="keyword">then</span></span><br><span class="line">    ngx.<span class="built_in">log</span>(ngx.ERR, <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"error when setting up timer.every for sync_backends: %s"</span>, <span class="built_in">tostring</span>(err)))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">sync_backends</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> backends_data = configuration.get_backends_data()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">local</span> new_backends, err = cjson.decode(backends_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">local</span> balancers_to_keep = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> _, new_backend <span class="keyword">in</span> <span class="built_in">ipairs</span>(new_backends) <span class="keyword">do</span></span><br><span class="line">    sync_backend(new_backend)</span><br><span class="line">    balancers_to_keep[new_backend.name] = balancers[new_backend.name]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">####https://sourcegraph.com/github.com/kubernetes/ingress-nginx@dd0fe4b458cc5520f25eb8bba25bbe6f0c72ee98/-/blob/rootfs/etc/nginx/lua/configuration.lua?utm_source=share#L10:<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> configuration_data = ngx.shared.configuration_data</span><br><span class="line"><span class="keyword">local</span> certificate_data = ngx.shared.certificate_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> _M = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_M.get_backends_data</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">return</span> configuration_data:get(<span class="string">"backends"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_M.call</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">if</span> ngx.var.request_method ~= <span class="string">"POST"</span> <span class="keyword">and</span> ngx.var.request_method ~= <span class="string">"GET"</span> <span class="keyword">then</span></span><br><span class="line">    ngx.<span class="built_in">status</span> = ngx.HTTP_BAD_REQUEST</span><br><span class="line">    ngx.<span class="built_in">print</span>(<span class="string">"Only POST and GET requests are allowed!"</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ngx.var.request_uri == <span class="string">"/configuration/servers"</span> <span class="keyword">then</span></span><br><span class="line">    handle_servers()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ngx.var.request_uri == <span class="string">"/configuration/general"</span> <span class="keyword">then</span></span><br><span class="line">    handle_general()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ngx.var.uri == <span class="string">"/configuration/certs"</span> <span class="keyword">then</span></span><br><span class="line">    handle_certs()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ngx.var.request_uri ~= <span class="string">"/configuration/backends"</span> <span class="keyword">then</span> ####只接受以上<span class="number">4</span>类型URL</span><br><span class="line">    ngx.<span class="built_in">status</span> = ngx.HTTP_NOT_FOUND</span><br><span class="line">    ngx.<span class="built_in">print</span>(<span class="string">"Not found!"</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">local</span> backends = fetch_request_body()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">local</span> success, err = configuration_data:set(<span class="string">"backends"</span>, backends)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">### fetch_request_body()，从此函数可以看出此函数是一个外部调用，可以得出原始的数据来源为外部触发的POST，可以查询Call()函数的引用位置</span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch_request_body</span><span class="params">()</span></span></span><br><span class="line">  ngx.req.read_body() ###防止ngx.req.get_body_data()返回<span class="literal">nil</span>,显示执行一下</span><br><span class="line">  <span class="keyword">local</span> body = ngx.req.get_body_data()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> body <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">local</span> file_name = ngx.req.get_body_file() ###读取cache file</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> file = <span class="built_in">io</span>.<span class="built_in">open</span>(file_name, <span class="string">"rb"</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> file <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    body = file:<span class="built_in">read</span>(<span class="string">"*all"</span>)</span><br><span class="line">    file:<span class="built_in">close</span>()</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> body</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####nginx.conf 查看nginx配置文件中显示调用call()函数的位置为当前server切url /configuration 符合函数要求，在查找外部调用的代码（基本可以定位为控制器的逻辑控制）</span></span><br><span class="line">       <span class="built_in"> server </span>&#123;</span><br><span class="line">                listen unix:/tmp/nginx-status-server.sock;</span><br><span class="line">                <span class="builtin-name">set</span> <span class="variable">$proxy_upstream_name</span> <span class="string">"internal"</span>;</span><br><span class="line"></span><br><span class="line">                keepalive_timeout 0;</span><br><span class="line">                gzip off;</span><br><span class="line"></span><br><span class="line">                access_log off;</span><br><span class="line"></span><br><span class="line">                location /configuration &#123;</span><br><span class="line">                        # this should be equals <span class="keyword">to</span> configuration_data dict</span><br><span class="line">                        client_max_body_size                    10m;</span><br><span class="line">                        client_body_buffer_size                 10m;</span><br><span class="line">                        proxy_buffering                         off;</span><br><span class="line"></span><br><span class="line">                        content_by_lua_block &#123;</span><br><span class="line">                                configuration.call()</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><h4 id="3-通过上面的信息检索，在Ingress中监听pod变化信息，动态调用-configuration-backends-函数为configureBackends"><a href="#3-通过上面的信息检索，在Ingress中监听pod变化信息，动态调用-configuration-backends-函数为configureBackends" class="headerlink" title="3. 通过上面的信息检索，在Ingress中监听pod变化信息，动态调用/configuration/backends, 函数为configureBackends()"></a>3. 通过上面的信息检索，在Ingress中监听pod变化信息，动态调用/configuration/backends, 函数为configureBackends()</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">####https:<span class="comment">//github.com/kubernetes/ingress-nginx/blob/ce3e3d51c397ff6a0cd6731cc64360ecdb69ea54/internal/ingress/controller/nginx.go#L982</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">configureBackends</span><span class="params">(rawBackends []*ingress.Backend)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">backends := <span class="built_in">make</span>([]*ingress.Backend, <span class="built_in">len</span>(rawBackends))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, backend := <span class="keyword">range</span> rawBackends &#123;</span><br><span class="line"><span class="keyword">var</span> service *apiv1.Service</span><br><span class="line"><span class="keyword">if</span> backend.Service != <span class="literal">nil</span> &#123;</span><br><span class="line">service = &amp;apiv1.Service&#123;Spec: backend.Service.Spec&#125;</span><br><span class="line">&#125;</span><br><span class="line">luaBackend := &amp;ingress.Backend&#123;</span><br><span class="line">Name:                 backend.Name,</span><br><span class="line">Port:                 backend.Port,</span><br><span class="line">SSLPassthrough:       backend.SSLPassthrough,</span><br><span class="line">SessionAffinity:      backend.SessionAffinity,</span><br><span class="line">UpstreamHashBy:       backend.UpstreamHashBy,</span><br><span class="line">LoadBalancing:        backend.LoadBalancing,</span><br><span class="line">Service:              service,</span><br><span class="line">NoServer:             backend.NoServer,</span><br><span class="line">TrafficShapingPolicy: backend.TrafficShapingPolicy,</span><br><span class="line">AlternativeBackends:  backend.AlternativeBackends,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> endpoints []ingress.Endpoint</span><br><span class="line"><span class="keyword">for</span> _, endpoint := <span class="keyword">range</span> backend.Endpoints &#123;</span><br><span class="line">endpoints = <span class="built_in">append</span>(endpoints, ingress.Endpoint&#123;</span><br><span class="line">Address: endpoint.Address,</span><br><span class="line">Port:    endpoint.Port,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">luaBackend.Endpoints = endpoints</span><br><span class="line">backends[i] = luaBackend</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">statusCode, _, err := nginx.NewPostStatusRequest(<span class="string">"/configuration/backends"</span>, <span class="string">"application/json"</span>, backends) ####backends 为request.body,却内容为IP/PORT，以下给出了backend的<span class="keyword">struct</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> statusCode != http.StatusCreated &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"unexpected error code: %d"</span>, statusCode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">####Backend <span class="keyword">struct</span></span><br><span class="line"><span class="keyword">type</span> Backend <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="keyword">string</span>             <span class="string">`json:"name"`</span></span><br><span class="line">Service *apiv1.Service     <span class="string">`json:"service,omitempty"`</span></span><br><span class="line">Port    intstr.IntOrString <span class="string">`json:"port"`</span></span><br><span class="line">SecureCACert resolver.AuthSSLCert <span class="string">`json:"secureCACert"`</span></span><br><span class="line">SSLPassthrough <span class="keyword">bool</span> <span class="string">`json:"sslPassthrough"`</span></span><br><span class="line">Endpoints []Endpoint <span class="string">`json:"endpoints,omitempty"`</span></span><br><span class="line">SessionAffinity SessionAffinityConfig <span class="string">`json:"sessionAffinityConfig"`</span></span><br><span class="line">UpstreamHashBy UpstreamHashByConfig <span class="string">`json:"upstreamHashByConfig,omitempty"`</span></span><br><span class="line">LoadBalancing <span class="keyword">string</span> <span class="string">`json:"load-balance,omitempty"`</span></span><br><span class="line">NoServer <span class="keyword">bool</span> <span class="string">`json:"noServer"`</span></span><br><span class="line">TrafficShapingPolicy TrafficShapingPolicy <span class="string">`json:"trafficShapingPolicy,omitempty"`</span></span><br><span class="line">AlternativeBackends []<span class="keyword">string</span> <span class="string">`json:"alternativeBackends,omitempty"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-ngx-balancer-set-current-peer-设置backend信息"><a href="#4-ngx-balancer-set-current-peer-设置backend信息" class="headerlink" title="4. ngx_balancer.set_current_peer()设置backend信息"></a>4. ngx_balancer.set_current_peer()设置backend信息</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">####https://sourcegraph.com/github.com/kubernetes/ingress-nginx@dd0fe4b458cc5520f25eb8bba25bbe6f0c72ee98/-/blob/rootfs/etc/nginx/lua/balancer.lua?utm_source=share#L232:<span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_M.balance</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> balancer = get_balancer()</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> balancer <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">local</span> peer = balancer:balance()</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> peer <span class="keyword">then</span></span><br><span class="line">    ngx.<span class="built_in">log</span>(ngx.WARN, <span class="string">"no peer was returned, balancer: "</span> .. balancer.name)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  ngx_balancer.set_more_tries(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">local</span> ok, err = ngx_balancer.set_current_peer(peer) ####设置server信息</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span></span><br><span class="line">    ngx.<span class="built_in">log</span>(ngx.ERR, <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"error while setting current upstream peer %s: %s"</span>, peer, err))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">get_balancer</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">if</span> ngx.ctx.balancer <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> ngx.ctx.balancer</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">local</span> backend_name = ngx.var.proxy_upstream_name ###获取当前request上下文中共享的变量proxy_upstream_name</span><br><span class="line"></span><br><span class="line">  <span class="keyword">local</span> balancer = balancers[backend_name] ###获取balancers信息由sync_backend()函数定时轮询</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> balancer <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> route_to_alternative_balancer(balancer) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">local</span> alternative_backend_name = balancer.alternative_backends[<span class="number">1</span>]</span><br><span class="line">    ngx.var.proxy_alternative_upstream_name = alternative_backend_name</span><br><span class="line"></span><br><span class="line">    balancer = balancers[alternative_backend_name]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  ngx.ctx.balancer = balancer</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> balancer</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###nginx.conf</span></span><br><span class="line"><span class="attribute">set</span> <span class="variable">$proxy_upstream_name</span>    <span class="string">"dev-dev-auto-deploy-5000"</span>;</span><br><span class="line"><span class="attribute">set</span> <span class="variable">$proxy_host</span>             <span class="variable">$proxy_upstream_name</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">proxy_pass</span> http://upstream_balancer;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;只节选了比较关键的代码，删除了比较多的干扰项。纯属个人理解！！！&lt;/p&gt;
&lt;h4 id=&quot;1-初始化balancer-init-worker-，使用balancer-balance-动态获取&quot;&gt;&lt;a href=&quot;#1-初始化balancer-init-worker-，使用b
      
    
    </summary>
    
    
      <category term="k8s" scheme="https://www.xiemx.com/categories/k8s/"/>
    
    
      <category term="k8s" scheme="https://www.xiemx.com/tags/k8s/"/>
    
      <category term="ingress" scheme="https://www.xiemx.com/tags/ingress/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL查看复制状态</title>
    <link href="https://www.xiemx.com//2019/07/08/postgresql-replica-status/"/>
    <id>https://www.xiemx.com//2019/07/08/postgresql-replica-status/</id>
    <published>2019-07-08T03:07:36.000Z</published>
    <updated>2019-10-19T09:40:34.388Z</updated>
    
    <content type="html"><![CDATA[<h4 id="postgresql查看复制状态，master上执行"><a href="#postgresql查看复制状态，master上执行" class="headerlink" title="postgresql查看复制状态，master上执行"></a>postgresql查看复制状态，master上执行</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#select * from pg_stat_replication; </span></span><br><span class="line">postgres=<span class="comment"># select * from pg_stat_replication;</span></span><br><span class="line">-[ RECORD 1 ]<span class="comment">----+------------------------------</span></span><br><span class="line">pid              | 13321</span><br><span class="line">usesysid         | 17019</span><br><span class="line">usename          | replication</span><br><span class="line">application_name | walreceiver</span><br><span class="line">client_addr      | 10.0.0.81</span><br><span class="line">client_hostname  | </span><br><span class="line">client_port      | 42809</span><br><span class="line">backend_start    | 2016-08-11 10:57:35.856289+08</span><br><span class="line">backend_xmin     | </span><br><span class="line">state            | streaming <span class="comment">--同步状态</span></span><br><span class="line">sent_location    | 1/E0CE9750</span><br><span class="line">write_location   | 1/E0CE9750</span><br><span class="line">flush_location   | 1/E0CE9750</span><br><span class="line">replay_location  | 1/E0CE9750</span><br><span class="line">sync_priority    | 0</span><br><span class="line">sync_state       | async  <span class="comment">--同步模式</span></span><br><span class="line"></span><br><span class="line">state: 同步状态</span><br><span class="line">    streaming : 同步</span><br><span class="line">    startup : 连接中</span><br><span class="line">    catchup: 同步中</span><br><span class="line"></span><br><span class="line">sync_state: 同步模式.</span><br><span class="line">    async : 异步</span><br><span class="line">    sync : 同步</span><br><span class="line">    potential: 虽然现在是异步,但有可能提升到同步</span><br></pre></td></tr></table></figure><h4 id="查看复制的延迟有多少，字节单位，master上执行"><a href="#查看复制的延迟有多少，字节单位，master上执行" class="headerlink" title="查看复制的延迟有多少，字节单位，master上执行"></a>查看复制的延迟有多少，字节单位，master上执行</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#select pg_xlog_location_diff(sent_location, replay_location) from pg_stat_replication; </span></span><br><span class="line"></span><br><span class="line">posrgresql=<span class="comment"># select pg_xlog_location_diff(sent_location, replay_location) from pg_stat_replication; </span></span><br><span class="line"> pg_xlog_location_diff </span><br><span class="line"><span class="comment">-----------------------</span></span><br><span class="line">                      0</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><h4 id="slave上查看sql滞后时间"><a href="#slave上查看sql滞后时间" class="headerlink" title="slave上查看sql滞后时间"></a>slave上查看sql滞后时间</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> pg_last_xlog_receive_location() = pg_last_xlog_replay_location()</span><br><span class="line">    <span class="keyword">THEN</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">ELSE</span> <span class="keyword">EXTRACT</span> (EPOCH <span class="keyword">FROM</span> <span class="keyword">now</span>() - pg_last_xact_replay_timestamp())</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">AS</span> log_delay;</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># SELECT CASE WHEN pg_last_xlog_receive_location() = pg_last_xlog_replay_location()</span></span><br><span class="line">postgres-<span class="comment">#     THEN 0</span></span><br><span class="line">postgres-<span class="comment">#     ELSE EXTRACT (EPOCH FROM now() - pg_last_xact_replay_timestamp())</span></span><br><span class="line">postgres-<span class="comment">#     END AS log_delay;</span></span><br><span class="line"> log_delay</span><br><span class="line"><span class="comment">-----------</span></span><br><span class="line">         0</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><h4 id="slave上查看是否处于recovery模式"><a href="#slave上查看是否处于recovery模式" class="headerlink" title="slave上查看是否处于recovery模式"></a>slave上查看是否处于recovery模式</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> pg_is_in_recovery();</span><br><span class="line">postgres=<span class="comment"># select pg_is_in_recovery();</span></span><br><span class="line"> pg_is_in_recovery</span><br><span class="line"><span class="comment">-------------------</span></span><br><span class="line"> t</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><h4 id="slave上查看最新的reploy时间戳"><a href="#slave上查看最新的reploy时间戳" class="headerlink" title="slave上查看最新的reploy时间戳"></a>slave上查看最新的reploy时间戳</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#select pg_last_xact_replay_timestamp();</span></span><br><span class="line">postgres=<span class="comment"># select pg_last_xact_replay_timestamp();</span></span><br><span class="line"> pg_last_xact_replay_timestamp</span><br><span class="line"><span class="comment">-------------------------------</span></span><br><span class="line"> 2019-07-08 03:01:33.854131+00</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><h4 id="slave上查看最新的reploy位置"><a href="#slave上查看最新的reploy位置" class="headerlink" title="slave上查看最新的reploy位置"></a>slave上查看最新的reploy位置</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#select pg_last_xlog_replay_location();</span></span><br><span class="line">postgres=<span class="comment"># select pg_last_xlog_replay_location();</span></span><br><span class="line"> pg_last_xlog_replay_location</span><br><span class="line"><span class="comment">------------------------------</span></span><br><span class="line"> 220C/56EB4C10</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;postgresql查看复制状态，master上执行&quot;&gt;&lt;a href=&quot;#postgresql查看复制状态，master上执行&quot; class=&quot;headerlink&quot; title=&quot;postgresql查看复制状态，master上执行&quot;&gt;&lt;/a&gt;postgres
      
    
    </summary>
    
    
      <category term="postgresql" scheme="https://www.xiemx.com/categories/postgresql/"/>
    
    
      <category term="database" scheme="https://www.xiemx.com/tags/database/"/>
    
      <category term="postgresql" scheme="https://www.xiemx.com/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>http cache</title>
    <link href="https://www.xiemx.com//2019/05/13/http-cache/"/>
    <id>https://www.xiemx.com//2019/05/13/http-cache/</id>
    <published>2019-05-13T03:05:02.000Z</published>
    <updated>2019-10-21T06:57:42.935Z</updated>
    
    <content type="html"><![CDATA[<h4 id="cache流程图"><a href="#cache流程图" class="headerlink" title="cache流程图"></a><strong>cache流程图</strong></h4><p><img src="/images/image.png" alt="img"></p><h3 id="“no-cache”和“no-store”"><a href="#“no-cache”和“no-store”" class="headerlink" title="“no-cache”和“no-store”"></a>“no-cache”和“no-store”</h3><p>“no-cache”表示必须先与服务器确认返回的响应是否发生了变化，然后才能使用该响应来满足后续对同一网址的请求。 因此，如果存在合适的验证令牌 (ETag)，no-cache 会发起往返通信来验证缓存的响应，但如果资源未发生变化，则可避免下载。</p><p>“no-store”禁止浏览器以及所有中间缓存存储任何版本的返回响应，例如，包含个人隐私数据或银行业务数据的响应。 每次用户请求该资产时，都会向服务器发送请求，并下载完整的响应。</p><h3 id="“public”与-“private”"><a href="#“public”与-“private”" class="headerlink" title="“public”与 “private”"></a>“public”与 “private”</h3><p>“public”则即使它有关联的 HTTP 身份验证，甚至响应状态代码通常无法缓存，也可以缓存响应。 大多数情况下，“public”不是必需的，因为明确的缓存信息（例如“max-age”）已表示响应是可以缓存的。</p><p>“private”浏览器可以缓存响应，不允许任何中间缓存对其进行缓存。 例如，用户的浏览器可以缓存包含用户私人信息的 HTML 网页，但 CDN 却不能缓存。</p><h3 id="“max-age”"><a href="#“max-age”" class="headerlink" title="“max-age”"></a>“max-age”</h3><p>指令指定从请求的时间开始，允许提取的响应被重用的最长时间（单位：秒）。 例如，“max-age=60”表示可在接下来的 60 秒缓存和重用响应。</p><h2 id="通过-ETag-验证缓存的响应"><a href="#通过-ETag-验证缓存的响应" class="headerlink" title="通过 ETag 验证缓存的响应"></a>通过 ETag 验证缓存的响应</h2><p>在首次请求资源时服务器生成并返回”ETag” http请求头(通常是文件内容的哈希值或某个其他指纹)。 当120 秒后，浏览器又对该资源发起了新的请求。 首先，浏览器会检查本地缓存并找到之前的响应。如果发现缓存超过max-age, 浏览器将发起一个带有”If-None-Match”的http请求。 如果Etag相同，则返回304，使用本地缓存。</p><p><img src="/images/http-cache-control.png" alt="HTTP Cache-Control 示例"></p><p>参考： <a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching" target="_blank" rel="noopener">https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;cache流程图&quot;&gt;&lt;a href=&quot;#cache流程图&quot; class=&quot;headerlink&quot; title=&quot;cache流程图&quot;&gt;&lt;/a&gt;&lt;strong&gt;cache流程图&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/images/image.png&quot; 
      
    
    </summary>
    
    
      <category term="http" scheme="https://www.xiemx.com/categories/http/"/>
    
    
      <category term="http" scheme="https://www.xiemx.com/tags/http/"/>
    
      <category term="cache" scheme="https://www.xiemx.com/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>Mysqldump error</title>
    <link href="https://www.xiemx.com//2019/05/06/mysqldump-error/"/>
    <id>https://www.xiemx.com//2019/05/06/mysqldump-error/</id>
    <published>2019-05-06T03:05:56.000Z</published>
    <updated>2019-10-19T10:22:28.240Z</updated>
    
    <content type="html"><![CDATA[<h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@FCHK-instance ~]# mysqldump <span class="comment">--host rm-xxxxxxxxxxx.mysql.rds.aliyuncs.com -u xxxx -p --databases visa &gt; hk.sql</span></span><br><span class="line">Enter password:</span><br><span class="line"><span class="literal">Warning</span>: A partial dump from a server that has GTIDs will by <span class="keyword">default</span> include the GTIDs <span class="keyword">of</span> <span class="keyword">all</span> transactions, even those that changed suppressed parts <span class="keyword">of</span> the database. <span class="keyword">If</span> you don<span class="symbol">'t</span> want <span class="keyword">to</span> restore GTIDs, pass <span class="comment">--set-gtid-purged=OFF. To make a complete dump, pass --all-databases --triggers --routines --events.</span></span><br><span class="line">mysqldump: Couldn<span class="symbol">'t</span> execute <span class="symbol">'SELECT</span> COLUMN_NAME,                       JSON_EXTRACT(HISTOGRAM, '$.<span class="string">"number-of-buckets-specified"</span>')                FROM information_schema.COLUMN_STATISTICS                WHERE SCHEMA_NAME = <span class="symbol">'visa</span>' <span class="keyword">AND</span> TABLE_NAME = <span class="symbol">'admin</span>';': Unknown table <span class="symbol">'column_statistics</span>' <span class="keyword">in</span> information_schema (<span class="number">1109</span></span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@FCHK-instance ~]# mysql <span class="comment">--version</span></span><br><span class="line">mysql  Ver <span class="number">8.0</span><span class="number">.11</span> <span class="keyword">for</span> Linux <span class="keyword">on</span> x86_64 (MySQL Community <span class="keyword">Server</span> - GPL)</span><br><span class="line"></span><br><span class="line">可能是由于mysqldump <span class="number">8</span>中默认启用（COLUMN_STATISTICS）</span><br><span class="line"></span><br><span class="line">官方文档解释</span><br><span class="line">Mysql <span class="number">8.0</span> The INFORMATION_SCHEMA COLUMN_STATISTICS <span class="keyword">Table</span></span><br><span class="line">https://dev.mysql.com/doc/refman/<span class="number">8.0</span>/en/<span class="keyword">column</span>-<span class="keyword">statistics</span>-<span class="keyword">table</span>.html</span><br></pre></td></tr></table></figure><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@FCHK-instance ~]# mysqldump <span class="comment">--host rm-xxxxxxxxxx2.mysql.rds.aliyuncs.com -u xxxx -p --databases visa --column-statistics=0 &gt; hk.sql</span></span><br><span class="line">Enter password:</span><br><span class="line"><span class="literal">Warning</span>: A partial dump from a server that has GTIDs will by <span class="keyword">default</span> include the GTIDs <span class="keyword">of</span> <span class="keyword">all</span> transactions, even those that changed suppressed parts <span class="keyword">of</span> the database. <span class="keyword">If</span> you don<span class="symbol">'t</span> want <span class="keyword">to</span> restore GTIDs, pass <span class="comment">--set-gtid-purged=OFF. To make a complete dump, pass --all-databases --triggers --routines --events.</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h3&gt;&lt;figure class=&quot;highlight vhdl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://www.xiemx.com/categories/mysql/"/>
    
    
      <category term="debug" scheme="https://www.xiemx.com/tags/debug/"/>
    
      <category term="mysql" scheme="https://www.xiemx.com/tags/mysql/"/>
    
      <category term="database" scheme="https://www.xiemx.com/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>redis-dump使用</title>
    <link href="https://www.xiemx.com//2019/05/06/redis-dump/"/>
    <id>https://www.xiemx.com//2019/05/06/redis-dump/</id>
    <published>2019-05-06T03:05:33.000Z</published>
    <updated>2019-10-19T09:09:04.060Z</updated>
    
    <content type="html"><![CDATA[<ul><li>安装redis-dump/redis-load</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">需要ruby 2.2.2以上版本（可以直接使用ruby:2.2.3的docker images）</span></span><br><span class="line">gem install redis-dum</span><br></pre></td></tr></table></figure><ul><li><p>dump redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@5dba1bd8fa77:/# redis-dump -h</span><br><span class="line">  Try: /usr/local/bundle/bin/redis-dump show-commands</span><br><span class="line">Usage: /usr/local/bundle/bin/redis-dump [global options] COMMAND [command options]</span><br><span class="line">    -u, --uri=S                      Redis URI (e.g. redis://hostname[:port])</span><br><span class="line">    -d, --database=S                 Redis database (e.g. -d 15)</span><br><span class="line">    -a, --password=S                 Redis password (e.g. -a 'my@pass/word')</span><br><span class="line">    -s, --sleep=S                    Sleep for S seconds after dumping (for debugging)</span><br><span class="line">    -c, --count=S                    Chunk size (default: 10000)</span><br><span class="line">    -f, --filter=S                   Filter selected keys (passed directly to redis' KEYS command)</span><br><span class="line">    -b, --base64                     Encode key values as base64 (useful for binary values)</span><br><span class="line">    -O, --without_optimizations      Disable run time optimizations</span><br><span class="line">    -V, --version                    Display version</span><br><span class="line">    -D, --debug</span><br><span class="line">        --nosafe</span><br><span class="line"></span><br><span class="line">root@5dba1bd8fa77:/# redis-dump -u aux-redis.1uvkyf.0001.cnn1.cache.amazonaws.com.cn &gt; redis-uat.json</span><br></pre></td></tr></table></figure></li><li><p>load redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@5dba1bd8fa77:/# redis-load -h</span><br><span class="line">  Try: /usr/local/bundle/bin/redis-load show-commands</span><br><span class="line">Usage: /usr/local/bundle/bin/redis-load [global options] COMMAND [command options]</span><br><span class="line">    -u, --uri=S                      Redis URI (e.g. redis://hostname[:port])</span><br><span class="line">    -d, --database=S                 Redis database (e.g. -d 15)</span><br><span class="line">    -a, --password=S                 Redis password (e.g. -a 'my@pass/word')</span><br><span class="line">    -s, --sleep=S                    Sleep for S seconds after dumping (for debugging)</span><br><span class="line">    -b, --base64                     Decode key values from base64 (used with redis-dump -b)</span><br><span class="line">    -n, --no_check_utf8</span><br><span class="line">    -V, --version                    Display version</span><br><span class="line">    -D, --debug</span><br><span class="line">        --nosafe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@5dba1bd8fa77:/# redis-load -u aux-redis.1uvkyf.0001.cnn1.cache.amazonaws.com.cn:6379/0 &lt; redis-uat.json</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;安装redis-dump/redis-load&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b
      
    
    </summary>
    
    
      <category term="redis" scheme="https://www.xiemx.com/categories/redis/"/>
    
    
      <category term="redis" scheme="https://www.xiemx.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>SSH的AuthorizedKeysCommand、AuthorizedKeysCommandUser</title>
    <link href="https://www.xiemx.com//2019/05/06/ssh-authorizedkeyscommand/"/>
    <id>https://www.xiemx.com//2019/05/06/ssh-authorizedkeyscommand/</id>
    <published>2019-05-06T03:05:17.000Z</published>
    <updated>2019-10-21T06:57:43.061Z</updated>
    
    <content type="html"><![CDATA[<ul><li>AuthorizedKeysCommand 可以指定运行一个脚本，而这个脚本主要是寻找登录用户的publickey，默认传参为登录用户名，若未认证成功，将继续使用AuthorizedKeysFile文件来做认证。</li><li>AuthorizedKeysCommandUser就是指定以什么用户来运行这个脚本。 这两个配置选项的一个用处就是在用户管理上可以不再依靠本地管理，而可以通过脚本读取远程数据库系统中的用户的publickey进行认证，例如MySQL或者LDAP，这样的话，更便于用户的集中管理。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;AuthorizedKeysCommand 可以指定运行一个脚本，而这个脚本主要是寻找登录用户的publickey，默认传参为登录用户名，若未认证成功，将继续使用AuthorizedKeysFile文件来做认证。&lt;/li&gt;
&lt;li&gt;AuthorizedKeysC
      
    
    </summary>
    
    
      <category term="linux" scheme="https://www.xiemx.com/categories/linux/"/>
    
    
      <category term="linux" scheme="https://www.xiemx.com/tags/linux/"/>
    
      <category term="ssh" scheme="https://www.xiemx.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>通过lambda修改AWS CloudFront回源host</title>
    <link href="https://www.xiemx.com//2018/10/11/aws-edge-lambda-modify-origin-host/"/>
    <id>https://www.xiemx.com//2018/10/11/aws-edge-lambda-modify-origin-host/</id>
    <published>2018-10-10T19:10:17.000Z</published>
    <updated>2019-10-21T06:57:43.061Z</updated>
    
    <content type="html"><![CDATA[<p>在使用aws cloudfront时发现cloudfront默认不允许自定义回源请求头的Host字段，对于一些情况我们需要使用这个host+ip来回源的时候就有点坑了，这个时候我们可以通过使用aws的lambda@edge，去修改request的header来实现自定义host来回源。</p><p>aws lambda@edge文档：<a href="https://docs.aws.amazon.com/zh_cn/lambda/latest/dg/lambda-edge.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/zh_cn/lambda/latest/dg/lambda-edge.html</a></p><ol><li>在创建lambda函数，并发布一个版本注意只能在us-east-1这个区创建，否则在附加到cloudfront的时候会报错不支持的区域，代码如下</li></ol><p><img src="/images/img_5bbef98529a61.png" alt="img"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// force a specific Host header to be sent to the origin</span></span><br><span class="line"></span><br><span class="line">exports.handler = <span class="function">(<span class="params">event, context, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> request = event.Records[<span class="number">0</span>].cf.request;</span><br><span class="line">    request.headers.host[<span class="number">0</span>].value = <span class="string">'www.xiemx.com'</span>;</span><br><span class="line">    <span class="keyword">return</span> callback(<span class="literal">null</span>, request);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>在cloudfront的Behavior菜单中</li></ol><p><img src="/images/img_5bbefa0f833d9.png" alt="img"></p><ol start="3"><li>重新deploy cdn和刷新一次cdn缓存</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用aws cloudfront时发现cloudfront默认不允许自定义回源请求头的Host字段，对于一些情况我们需要使用这个host+ip来回源的时候就有点坑了，这个时候我们可以通过使用aws的lambda@edge，去修改request的header来实现自定义ho
      
    
    </summary>
    
    
      <category term="aws" scheme="https://www.xiemx.com/categories/aws/"/>
    
    
      <category term="aws" scheme="https://www.xiemx.com/tags/aws/"/>
    
      <category term="lambda" scheme="https://www.xiemx.com/tags/lambda/"/>
    
      <category term="cloudfront" scheme="https://www.xiemx.com/tags/cloudfront/"/>
    
  </entry>
  
  <entry>
    <title>SLB 502报错Debug</title>
    <link href="https://www.xiemx.com//2018/07/20/slb-502-debug/"/>
    <id>https://www.xiemx.com//2018/07/20/slb-502-debug/</id>
    <published>2018-07-19T18:07:06.000Z</published>
    <updated>2019-10-19T08:11:47.770Z</updated>
    
    <content type="html"><![CDATA[<p>用户自定义站点502问题分析</p><ol><li>现象：自定义域名用户反馈，打开网站返回502，如图</li></ol><p><img src="/images/img_5b5183b84d4dd.png" alt="img"></p><p> 根据response header判断，请求到达captain，怀疑captain返回的502页面。查看nginx proxy_pass得知后端的地址为bobcat.sxldns.com.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">set</span> <span class="variable">$bobcat_backend</span> <span class="string">"bobcat.sxldns.com"</span>;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://<span class="variable">$bobcat_backend</span>;</span><br></pre></td></tr></table></figure><p>使用curl模拟请求，直接请求bobcat.sxldns.com,正常获得返回内容，具体针对每个服务器的IP的curl,不再单独列出。</p><p><img src="/images/img_5b5184bfd49e3.png" alt="img"></p><p>通过上述返回基本判断，问题出在我们的代理层。具体查看代理层的nginx配置和系统资源利用率。</p><p>查看当时系统的资源状态,查看到当时的系统磁盘空间使用完。查看nginx上有关于proxy的cache相关配置,nginx会cache的response的content的内容。怀疑nginx转发请求之后但是backend返回内容后，nginx cache到本地的时候无法写入disk导致会话结束，SLB的请求无返回包认为后端宕机抛出502。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_path /etc/nginx/china_cache <span class="attribute">levels</span>=1:2 <span class="attribute">keys_zone</span>=user_page_cache:100m <span class="attribute">max_size</span>=20g <span class="attribute">inactive</span>=60m <span class="attribute">use_temp_path</span>=off;</span><br></pre></td></tr></table></figure><p>具体DEBUG如下：</p><ol><li>获取container中的nginx worker进程的PID</li></ol><p><img src="/images/img_5b5184fb1c8d4.png" alt="img"></p><ol start="2"><li>strace查看下系统调用具体信息</li></ol><p><img src="/images/img_5b518515e4fe7.png" alt="img"></p><p>通过上图strace追踪流程可以看到左侧是一个正常的请求的全部流程，右侧是故障状态的strace的系统调用全流程。</p><p>通过对比左右两侧的系统调用流程可以看到，当nginx cache的时候写入<code>/etc/nginx/china_cache</code>目录时提示<code>no space</code>后续的writev()和sendfile()方法就没有调用，因此导致SLB无法获得返回包，抛出<code>badgateway</code>的错误.</p><p>PS：</p><ol><li>为什么单独请求返回头的时候正常返回？nginx返回请求头的时候并不会走proxy的cache流程。因此没有调用open()方法读写disk，正常返回，但是实际请求数据的时候cache写磁盘直接失败，后续直接退出。</li><li>上图的系统调用过程为了debug的方便使用了非折叠模式。因此一些no space的一些报错未显示出来可以。全部流程见附录。</li></ol><p>附录：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">1.异常调用堆栈</span><br><span class="line">[root@iZ2ze2mzhjk3ou1vsnkthzZ rpm]# strace -p 3904 -v</span><br><span class="line">strace: Process 3904 attached</span><br><span class="line">epoll_wait(8, [&#123;EPOLLIN, &#123;u32=69025808, u64=140003117973520&#125;&#125;], 512, -1) = 1</span><br><span class="line">accept4(6, &#123;sa_family=AF_INET, sin_port=htons(59464), sin_addr=inet_addr("10.130.0.4")&#125;, [16], SOCK_NONBLOCK) = 11</span><br><span class="line">epoll_ctl(8, EPOLL_CTL_ADD, 11, &#123;EPOLLIN|EPOLLRDHUP|EPOLLET, &#123;u32=69027249, u64=140003117974961&#125;&#125;) = 0</span><br><span class="line">epoll_wait(8, [&#123;EPOLLIN, &#123;u32=69027249, u64=140003117974961&#125;&#125;], 512, 60000) = 1</span><br><span class="line">recvfrom(11, "GET /?key=testxxxx HTTP/1.1<span class="symbol">\r</span><span class="symbol">\n</span>Use"..., 1024, 0, NULL, NULL) = 88</span><br><span class="line">epoll_ctl(8, EPOLL_CTL_MOD, 11, &#123;EPOLLIN|EPOLLOUT|EPOLLRDHUP|EPOLLET, &#123;u32=69027249, u64=140003117974961&#125;&#125;) = 0</span><br><span class="line">open("/etc/nginx/china_cache/2/7d/2ac65d1f9080e2baff45a4332f9017d2", O_RDONLY|O_NONBLOCK) = 14</span><br><span class="line">fstat(14, &#123;st_dev=makedev(253, 1), st_ino=655502, st_mode=S_IFREG|0600, st_nlink=1, st_uid=101, st_gid=101, st_blksize=4096, st_blocks=96, st_size=46750, st_atime=2018/07/17-16:34:43.967698739, st_mtime=2018/07/17-16:34:43.966698736, st_ctime=2018/07/17-16:34:43.967698739&#125;) = 0</span><br><span class="line">pread64(14, "<span class="symbol">\5</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span>(<span class="symbol">\2</span>52M[<span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span>"..., 636, 0) = 636</span><br><span class="line">getsockname(11, &#123;sa_family=AF_INET, sin_port=htons(80), sin_addr=inet_addr("172.17.0.2")&#125;, [16]) = 0</span><br><span class="line">sendto(13, "nN<span class="symbol">\1</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\1</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\6</span>bobcat<span class="symbol">\6</span>sxldns<span class="symbol">\3</span>com<span class="symbol">\0</span><span class="symbol">\0</span>"..., 35, 0, NULL, 0) = 35</span><br><span class="line">sendto(13, "<span class="symbol">\3</span>75<span class="symbol">\2</span>15<span class="symbol">\1</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\1</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\6</span>bobcat<span class="symbol">\6</span>sxldns<span class="symbol">\3</span>com<span class="symbol">\0</span><span class="symbol">\0</span>"..., 35, 0, NULL, 0) = 35</span><br><span class="line">epoll_wait(8, [&#123;EPOLLOUT, &#123;u32=69027249, u64=140003117974961&#125;&#125;, &#123;EPOLLIN, &#123;u32=69026288, u64=140003117974000&#125;&#125;], 512, 5000) = 2</span><br><span class="line">recvfrom(13, "nN<span class="symbol">\2</span>01<span class="symbol">\2</span>00<span class="symbol">\0</span><span class="symbol">\1</span><span class="symbol">\0</span><span class="symbol">\3</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\6</span>bobcat<span class="symbol">\6</span>sxldns<span class="symbol">\3</span>com<span class="symbol">\0</span><span class="symbol">\0</span>"..., 4096, 0, NULL, NULL) = 147</span><br><span class="line">recvfrom(13, "<span class="symbol">\3</span>75<span class="symbol">\2</span>15<span class="symbol">\2</span>01<span class="symbol">\2</span>00<span class="symbol">\0</span><span class="symbol">\1</span><span class="symbol">\0</span><span class="symbol">\1</span><span class="symbol">\0</span><span class="symbol">\1</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\6</span>bobcat<span class="symbol">\6</span>sxldns<span class="symbol">\3</span>com<span class="symbol">\0</span><span class="symbol">\0</span>"..., 4096, 0, NULL, NULL) = 168</span><br><span class="line">socket(AF_INET, SOCK_STREAM, IPPROTO_IP) = 15</span><br><span class="line">ioctl(15, FIONBIO, [1]) = 0</span><br><span class="line">epoll_ctl(8, EPOLL_CTL_ADD, 15, &#123;EPOLLIN|EPOLLOUT|EPOLLRDHUP|EPOLLET, &#123;u32=69027488, u64=140003117975200&#125;&#125;) = 0</span><br><span class="line">connect(15, &#123;sa_family=AF_INET, sin_port=htons(80), sin_addr=inet_addr("54.222.148.216")&#125;, 16) = -1 EINPROGRESS (Operation now in progress)</span><br><span class="line">recvfrom(13, 0x7ffd1f603790, 4096, 0, NULL, NULL) = -1 EAGAIN (Resource temporarily unavailable)</span><br><span class="line">epoll_wait(8, [&#123;EPOLLOUT, &#123;u32=69027488, u64=140003117975200&#125;&#125;], 512, 20000) = 1</span><br><span class="line">getsockopt(15, SOL_SOCKET, SO_ERROR, [0], [4]) = 0</span><br><span class="line">writev(15, [&#123;"GET /?key=testxxxx HTTP/1.0<span class="symbol">\r</span><span class="symbol">\n</span>Hos"..., 219&#125;], 1) = 219</span><br><span class="line">epoll_wait(8, [&#123;EPOLLIN|EPOLLOUT, &#123;u32=69027488, u64=140003117975200&#125;&#125;], 512, 60000) = 1</span><br><span class="line">recvfrom(15, "HTTP/1.1 200 OK<span class="symbol">\r</span><span class="symbol">\n</span>Content-Type: t"..., 3723, 0, NULL, NULL) = 3723</span><br><span class="line">close(14) = 0</span><br><span class="line">readv(15, [&#123;"a.qnssl.com/images/265818/Fntncr"..., 4096&#125;], 1) = 4096</span><br><span class="line">readv(15, [&#123;"w-card-price&#123;color: #004aa0;&#125;.s-"..., 4096&#125;], 1) = 4096</span><br><span class="line">readv(15, [&#123;" &#123;<span class="symbol">\n</span> font-family: <span class="symbol">\"</span>Open Sans"..., 4096&#125;], 1) = 373</span><br><span class="line">open("/etc/nginx/china_cache/2/7d/2ac65d1f9080e2baff45a4332f9017d2.0000014052", O_RDWR|O_CREAT|O_EXCL, 0600) = 14</span><br><span class="line">pwritev(14, [&#123;"<span class="symbol">\5</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\3</span>56<span class="symbol">\2</span>54M[<span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span>"..., 4096&#125;, &#123;"a.qnssl.com/images/265818/Fntncr"..., 4096&#125;, &#123;"w-card-price&#123;color: #004aa0;&#125;.s-"..., 4096&#125;], 3, 0) = -1 ENOSPC (No space left on device)</span><br><span class="line">gettid() = 7</span><br><span class="line">write(4, "2018/07/17 08:46:33 [crit] 7#7: "..., 328) = 328</span><br><span class="line">close(15) = 0</span><br><span class="line">unlink("/etc/nginx/china_cache/2/7d/2ac65d1f9080e2baff45a4332f9017d2.0000014052") = 0</span><br><span class="line">write(5, "&#123; <span class="symbol">\"</span>time<span class="symbol">\"</span>: <span class="symbol">\"</span>2018-07-17T08:46:33+0"..., 382) = 382</span><br><span class="line">close(14) = 0</span><br><span class="line">close(11) = 0</span><br><span class="line"></span><br><span class="line">2.正常调用堆栈过程</span><br><span class="line">[root@iZ2ze2mzhjk3ou1vsnkthzZ rpm]# strace -p 3904 -v</span><br><span class="line">strace: Process 3904 attached</span><br><span class="line">epoll_wait(8, [&#123;EPOLLIN, &#123;u32=69025808, u64=140003117973520&#125;&#125;], 512, -1) = 1</span><br><span class="line">accept4(6, &#123;sa_family=AF_INET, sin_port=htons(59360), sin_addr=inet_addr("10.130.0.4")&#125;, [16], SOCK_NONBLOCK) = 11</span><br><span class="line">epoll_ctl(8, EPOLL_CTL_ADD, 11, &#123;EPOLLIN|EPOLLRDHUP|EPOLLET, &#123;u32=69027248, u64=140003117974960&#125;&#125;) = 0</span><br><span class="line">epoll_wait(8, [&#123;EPOLLIN, &#123;u32=69027248, u64=140003117974960&#125;&#125;], 512, 60000) = 1</span><br><span class="line">recvfrom(11, "GET /?key=testxxxx HTTP/1.1<span class="symbol">\r</span><span class="symbol">\n</span>Use"..., 1024, 0, NULL, NULL) = 88</span><br><span class="line">epoll_ctl(8, EPOLL_CTL_MOD, 11, &#123;EPOLLIN|EPOLLOUT|EPOLLRDHUP|EPOLLET, &#123;u32=69027248, u64=140003117974960&#125;&#125;) = 0</span><br><span class="line">open("/etc/nginx/china_cache/2/7d/2ac65d1f9080e2baff45a4332f9017d2", O_RDONLY|O_NONBLOCK) = 14</span><br><span class="line">fstat(14, &#123;st_dev=makedev(253, 1), st_ino=655504, st_mode=S_IFREG|0600, st_nlink=1, st_uid=101, st_gid=101, st_blksize=4096, st_blocks=96, st_size=46750, st_atime=2018/07/17-16:14:38.127407158, st_mtime=2018/07/17-16:14:38.127407158, st_ctime=2018/07/17-16:14:38.128407161&#125;) = 0</span><br><span class="line">pread64(14, "<span class="symbol">\5</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span>s<span class="symbol">\2</span>45M[<span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span>"..., 636, 0) = 636</span><br><span class="line">getsockname(11, &#123;sa_family=AF_INET, sin_port=htons(80), sin_addr=inet_addr("172.17.0.2")&#125;, [16]) = 0</span><br><span class="line">sendto(12, "<span class="symbol">\2</span>10V<span class="symbol">\1</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\1</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\6</span>bobcat<span class="symbol">\6</span>sxldns<span class="symbol">\3</span>com<span class="symbol">\0</span><span class="symbol">\0</span>"..., 35, 0, NULL, 0) = 35</span><br><span class="line">sendto(12, "<span class="symbol">\2</span>7<span class="symbol">\1</span><span class="symbol">\1</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\1</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\6</span>bobcat<span class="symbol">\6</span>sxldns<span class="symbol">\3</span>com<span class="symbol">\0</span><span class="symbol">\0</span>"..., 35, 0, NULL, 0) = 35</span><br><span class="line">epoll_wait(8, [&#123;EPOLLOUT, &#123;u32=69027248, u64=140003117974960&#125;&#125;, &#123;EPOLLIN, &#123;u32=69027728, u64=140003117975440&#125;&#125;], 512, 5000) = 2</span><br><span class="line">recvfrom(12, "<span class="symbol">\2</span>10V<span class="symbol">\2</span>01<span class="symbol">\2</span>00<span class="symbol">\0</span><span class="symbol">\1</span><span class="symbol">\0</span><span class="symbol">\3</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\6</span>bobcat<span class="symbol">\6</span>sxldns<span class="symbol">\3</span>com<span class="symbol">\0</span><span class="symbol">\0</span>"..., 4096, 0, NULL, NULL) = 147</span><br><span class="line">recvfrom(12, "<span class="symbol">\2</span>7<span class="symbol">\1</span><span class="symbol">\2</span>01<span class="symbol">\2</span>00<span class="symbol">\0</span><span class="symbol">\1</span><span class="symbol">\0</span><span class="symbol">\1</span><span class="symbol">\0</span><span class="symbol">\1</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\6</span>bobcat<span class="symbol">\6</span>sxldns<span class="symbol">\3</span>com<span class="symbol">\0</span><span class="symbol">\0</span>"..., 4096, 0, NULL, NULL) = 168</span><br><span class="line">socket(AF_INET, SOCK_STREAM, IPPROTO_IP) = 15</span><br><span class="line">ioctl(15, FIONBIO, [1]) = 0</span><br><span class="line">epoll_ctl(8, EPOLL_CTL_ADD, 15, &#123;EPOLLIN|EPOLLOUT|EPOLLRDHUP|EPOLLET, &#123;u32=69027489, u64=140003117975201&#125;&#125;) = 0</span><br><span class="line">connect(15, &#123;sa_family=AF_INET, sin_port=htons(80), sin_addr=inet_addr("52.80.58.42")&#125;, 16) = -1 EINPROGRESS (Operation now in progress)</span><br><span class="line">recvfrom(12, 0x7ffd1f603790, 4096, 0, NULL, NULL) = -1 EAGAIN (Resource temporarily unavailable)</span><br><span class="line">epoll_wait(8, [&#123;EPOLLOUT, &#123;u32=69027489, u64=140003117975201&#125;&#125;], 512, 20000) = 1</span><br><span class="line">getsockopt(15, SOL_SOCKET, SO_ERROR, [0], [4]) = 0</span><br><span class="line">writev(15, [&#123;"GET /?key=testxxxx HTTP/1.0<span class="symbol">\r</span><span class="symbol">\n</span>Hos"..., 219&#125;], 1) = 219</span><br><span class="line">epoll_wait(8, [&#123;EPOLLIN|EPOLLOUT, &#123;u32=69027489, u64=140003117975201&#125;&#125;], 512, 60000) = 1</span><br><span class="line">recvfrom(15, "HTTP/1.1 200 OK<span class="symbol">\r</span><span class="symbol">\n</span>Content-Type: t"..., 3723, 0, NULL, NULL) = 3723</span><br><span class="line">close(14) = 0</span><br><span class="line">readv(15, [&#123;"a.qnssl.com/images/265818/Fntncr"..., 4096&#125;], 1) = 4096</span><br><span class="line">readv(15, [&#123;"w-card-price&#123;color: #004aa0;&#125;.s-"..., 4096&#125;], 1) = 4096</span><br><span class="line">readv(15, [&#123;" &#123;<span class="symbol">\n</span> font-family: <span class="symbol">\"</span>Open Sans"..., 4096&#125;], 1) = 2565</span><br><span class="line">open("/etc/nginx/china_cache/2/7d/2ac65d1f9080e2baff45a4332f9017d2.0000014051", O_RDWR|O_CREAT|O_EXCL, 0600) = 14</span><br><span class="line">pwritev(14, [&#123;"<span class="symbol">\5</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span>(<span class="symbol">\2</span>52M[<span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span><span class="symbol">\0</span>"..., 4096&#125;, &#123;"a.qnssl.com/images/265818/Fntncr"..., 4096&#125;, &#123;"w-card-price&#123;color: #004aa0;&#125;.s-"..., 4096&#125;], 3, 0) = 12288</span><br><span class="line">writev(11, [&#123;"HTTP/1.1 200 OK<span class="symbol">\r</span><span class="symbol">\n</span>Server: nginx/1"..., 321&#125;], 1) = 321</span><br><span class="line">sendfile(11, 14, [636] =&gt; [12288], 11652) = 11652</span><br><span class="line">epoll_wait(8, [&#123;EPOLLOUT, &#123;u32=69027489, u64=140003117975201&#125;&#125;], 512, 59955) = 1</span><br><span class="line">epoll_wait(8, [&#123;EPOLLIN|EPOLLOUT, &#123;u32=69027489, u64=140003117975201&#125;&#125;], 512, 59953) = 1</span><br><span class="line">readv(15, [&#123;"rc=<span class="symbol">\"</span>//nzr2ybsda.qnssl.com/images"..., 1531&#125;, &#123;"lass=<span class="symbol">\"</span>s-nav-item<span class="symbol">\"</span> target=<span class="symbol">\"</span>_self<span class="symbol">\"</span>"..., 4096&#125;, &#123;"lign: left; font-size: 160<span class="variable">%;\"&gt;\302\240"..., 4096&#125;, &#123;"OQswmpPvoA0.jpg?imageMogr2/strip"..., 4096&#125;], 4) = 10136</span></span><br><span class="line"><span class="variable">pwritev(14, [&#123;" &#123;\n font-family: \"Open Sans"..., 4096&#125;, &#123;"lass=\"s-nav-item\" target=\"_self\""..., 4096&#125;, &#123;"lign: left; font-size: 160%</span>;<span class="symbol">\"</span>&gt;<span class="symbol">\3</span>02<span class="symbol">\2</span>40"..., 4096&#125;], 3, 12288) = 12288</span><br><span class="line">sendfile(11, 14, [12288] =&gt; [24576], 12288) = 12288</span><br><span class="line">epoll_wait(8, [&#123;EPOLLIN|EPOLLOUT, &#123;u32=69027489, u64=140003117975201&#125;&#125;], 512, 59948) = 1</span><br><span class="line">readv(15, [&#123;"olor-custom1<span class="symbol">\"</span>&gt;<span class="symbol">\3</span>47<span class="symbol">\2</span>54<span class="symbol">\2</span>54<span class="symbol">\3</span>44<span class="symbol">\2</span>70<span class="symbol">\2</span>11<span class="symbol">\3</span>46<span class="symbol">\2</span>26<span class="symbol">\2</span>71<span class="symbol">\3</span>45"..., 3683&#125;, &#123;"container title-group-container<span class="symbol">\"</span>"..., 4096&#125;, &#123;";cs=srgb&amp;s=f71a6adc1e5953a52"..., 4096&#125;, &#123;")<span class="symbol">\"</span> data-bg=<span class="symbol">\"</span>//nzr2ybsda.qnssl.co"..., 4096&#125;], 4) = 15971</span><br><span class="line">readv(15, [&#123;"<span class="symbol">\2</span>30<span class="symbol">\2</span>63<span class="symbol">\3</span>45<span class="symbol">\2</span>24<span class="symbol">\2</span>57<span class="symbol">\3</span>46<span class="symbol">\2</span>31<span class="symbol">\2</span>37<span class="symbol">\"</span> title=<span class="symbol">\"</span><span class="symbol">\3</span>46<span class="symbol">\2</span>62<span class="symbol">\2</span>10<span class="symbol">\3</span>51<span class="symbol">\2</span>30<span class="symbol">\2</span>63<span class="symbol">\3</span>45<span class="symbol">\2</span>24<span class="symbol">\2</span>57<span class="symbol">\3</span>46<span class="symbol">\2</span>31<span class="symbol">\2</span>37<span class="symbol">\3</span>45<span class="symbol">\2</span>25<span class="symbol">\2</span>06"..., 4096&#125;], 1) = 2853</span><br><span class="line">pwritev(14, [&#123;"OQswmpPvoA0.jpg?imageMogr2/strip"..., 4096&#125;, &#123;"container title-group-container<span class="symbol">\"</span>"..., 4096&#125;, &#123;";cs=srgb&amp;s=f71a6adc1e5953a52"..., 4096&#125;, &#123;")<span class="symbol">\"</span> data-bg=<span class="symbol">\"</span>//nzr2ybsda.qnssl.co"..., 4096&#125;], 4, 24576) = 16384</span><br><span class="line">sendfile(11, 14, [24576] =&gt; [40960], 16384) = 16384</span><br><span class="line">epoll_wait(8, [&#123;EPOLLIN|EPOLLOUT, &#123;u32=69027489, u64=140003117975201&#125;&#125;], 512, 59947) = 1</span><br><span class="line">readv(15, [&#123;"</span><br><span class="line"></span><br><span class="line">&lt;d"..., 1243&#125;, &#123;"<span class="symbol">\2</span>32<span class="symbol">\2</span>04<span class="symbol">\3</span>44<span class="symbol">\2</span>70<span class="symbol">\2</span>32<span class="symbol">\3</span>47<span class="symbol">\2</span>73<span class="symbol">\2</span>51<span class="symbol">\3</span>44<span class="symbol">\2</span>71<span class="symbol">\2</span>37<span class="symbol">\3</span>45<span class="symbol">\2</span>34<span class="symbol">\2</span>50<span class="symbol">\3</span>44<span class="symbol">\2</span>70<span class="symbol">\2</span>15<span class="symbol">\3</span>46<span class="symbol">\2</span>26<span class="symbol">\2</span>55<span class="symbol">\3</span>46<span class="symbol">\2</span>24<span class="symbol">\2</span>00<span class="symbol">\3</span>45<span class="symbol">\2</span>15<span class="symbol">\2</span>07<span class="symbol">\3</span>43<span class="symbol">\2</span>00<span class="symbol">\2</span>02&lt;/d"..., 4096&#125;, &#123;"", 4096&#125;, &#123;"", 4096&#125;, &#123;"", 4096&#125;], 5) = 2937</span><br><span class="line">pwritev(14, [&#123;"<span class="symbol">\2</span>30<span class="symbol">\2</span>63<span class="symbol">\3</span>45<span class="symbol">\2</span>24<span class="symbol">\2</span>57<span class="symbol">\3</span>46<span class="symbol">\2</span>31<span class="symbol">\2</span>37<span class="symbol">\"</span> title=<span class="symbol">\"</span><span class="symbol">\3</span>46<span class="symbol">\2</span>62<span class="symbol">\2</span>10<span class="symbol">\3</span>51<span class="symbol">\2</span>30<span class="symbol">\2</span>63<span class="symbol">\3</span>45<span class="symbol">\2</span>24<span class="symbol">\2</span>57<span class="symbol">\3</span>46<span class="symbol">\2</span>31<span class="symbol">\2</span>37<span class="symbol">\3</span>45<span class="symbol">\2</span>25<span class="symbol">\2</span>06"..., 4096&#125;, &#123;"<span class="symbol">\2</span>32<span class="symbol">\2</span>04<span class="symbol">\3</span>44<span class="symbol">\2</span>70<span class="symbol">\2</span>32<span class="symbol">\3</span>47<span class="symbol">\2</span>73<span class="symbol">\2</span>51<span class="symbol">\3</span>44<span class="symbol">\2</span>71<span class="symbol">\2</span>37<span class="symbol">\3</span>45<span class="symbol">\2</span>34<span class="symbol">\2</span>50<span class="symbol">\3</span>44<span class="symbol">\2</span>70<span class="symbol">\2</span>15<span class="symbol">\3</span>46<span class="symbol">\2</span>26<span class="symbol">\2</span>55<span class="symbol">\3</span>46<span class="symbol">\2</span>24<span class="symbol">\2</span>00<span class="symbol">\3</span>45<span class="symbol">\2</span>15<span class="symbol">\2</span>07<span class="symbol">\3</span>43<span class="symbol">\2</span>00<span class="symbol">\2</span>02&lt;/d"..., 1694&#125;], 2, 40960) = 5790 sendfile(11, 14, [40960] =&gt; [46750], 5790) = 5790</span><br><span class="line">chmod("/etc/nginx/china_cache/2/7d/2ac65d1f9080e2baff45a4332f9017d2.0000014051", 0600) = 0</span><br><span class="line">rename("/etc/nginx/china_cache/2/7d/2ac65d1f9080e2baff45a4332f9017d2.0000014051", "/etc/nginx/china_cache/2/7d/2ac65d1f9080e2baff45a4332f9017d2") = 0</span><br><span class="line">fstat(14, &#123;st_dev=makedev(253, 1), st_ino=655502, st_mode=S_IFREG|0600, st_nlink=1, st_uid=101, st_gid=101, st_blksize=4096, st_blocks=96, st_size=46750, st_atime=2018/07/17-16:34:43.967698739, st_mtime=2018/07/17-16:34:43.966698736, st_ctime=2018/07/17-16:34:43.967698739&#125;) = 0</span><br><span class="line">close(15) = 0</span><br><span class="line">write(5, "&#123; <span class="symbol">\"</span>time<span class="symbol">\"</span>: <span class="symbol">\"</span>2018-07-17T08:34:43+0"..., 386) = 386</span><br><span class="line">close(14) = 0</span><br><span class="line">setsockopt(11, SOL_TCP, TCP_NODELAY, [1], 4) = 0</span><br><span class="line">epoll_wait(8, [&#123;EPOLLIN|EPOLLOUT|EPOLLRDHUP, &#123;u32=69027248, u64=140003117974960&#125;&#125;], 512, 65000) = 1</span><br><span class="line">recvfrom(11, "", 1024, 0, NULL, NULL) = 0</span><br><span class="line">close(11) = 0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用户自定义站点502问题分析&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;现象：自定义域名用户反馈，打开网站返回502，如图&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/images/img_5b5183b84d4dd.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt; 根据respons
      
    
    </summary>
    
    
      <category term="linux" scheme="https://www.xiemx.com/categories/linux/"/>
    
      <category term="nginx" scheme="https://www.xiemx.com/categories/linux/nginx/"/>
    
      <category term="debug" scheme="https://www.xiemx.com/categories/linux/nginx/debug/"/>
    
    
      <category term="debug" scheme="https://www.xiemx.com/tags/debug/"/>
    
      <category term="linux" scheme="https://www.xiemx.com/tags/linux/"/>
    
      <category term="nginx" scheme="https://www.xiemx.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>TCP状态机</title>
    <link href="https://www.xiemx.com//2018/01/23/tcp-state/"/>
    <id>https://www.xiemx.com//2018/01/23/tcp-state/</id>
    <published>2018-01-23T03:01:20.000Z</published>
    <updated>2019-10-21T06:57:42.714Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TCP状态分析"><a href="#TCP状态分析" class="headerlink" title="TCP状态分析"></a>TCP状态分析</h3><ul><li>listen／close</li><li>syn-sent/syn-revd</li><li>established</li><li>fin_wait_1/close_wait</li><li>fin_wait_2/last_ack</li><li>time_wait/close</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">LISTEN</span>        <span class="string">等待来自远程TCP应用程序的请求</span></span><br><span class="line"><span class="attr">SYN_SENT</span><span class="string">发送连接请求后等待来自远程端点的确认。TCP第一次握手后客户端所处的状态</span></span><br><span class="line"><span class="meta">SYN-RECEIVED</span><span class="string">该端点已经接收到连接请求并发送确认。该端点正在等待最终确认。TCP第二次握手后服务端所处的状态</span></span><br><span class="line"><span class="attr">ESTABLISHED</span><span class="string">代表连接已经建立起来了。这是连接数据传输阶段的正常状态</span></span><br><span class="line"><span class="attr">FIN_WAIT_1</span><span class="string">等待来自远程TCP的终止连接请求或终止请求的确认</span></span><br><span class="line"><span class="attr">FIN_WAIT_2</span><span class="string">在此端点发送终止连接请求后，等待来自远程TCP的连接终止请求</span></span><br><span class="line"><span class="attr">CLOSE_WAIT</span><span class="string">该端点已经收到来自远程端点的关闭请求，此TCP正在等待本地应用程序的连接终止请求</span></span><br><span class="line"><span class="attr">CLOSING</span>        <span class="string">等待来自远程TCP的连接终止请求确认</span></span><br><span class="line"><span class="attr">LAST_ACK</span><span class="string">等待先前发送到远程TCP的连接终止请求的确认</span></span><br><span class="line"><span class="attr">TIME_WAIT</span><span class="string">等待足够的时间来确保远程TCP接收到其连接终止请求的确认</span></span><br></pre></td></tr></table></figure><p>以上大致为一个Tcp从三次握手建立连接到四次挥手断开连接的整个过程C/S对应的TCP状态。</p><h3 id="详细流程"><a href="#详细流程" class="headerlink" title="详细流程"></a>详细流程</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 客户端(close)发送syn连接请求给服务端(<span class="section">listen</span>),客户端等待服务端ack(syn_sent)</span><br><span class="line"><span class="number">2.</span> 服务端收到syn请求,发送ack/syn(syn_rec)</span><br><span class="line"><span class="number">3.</span> 客户端收到ack(establelished)</span><br><span class="line"><span class="number">4.</span> 传输数据</span><br><span class="line"><span class="number">5.</span> 客户端数据交互完成请求关闭连接，发送fin请求(fin_wait_1)</span><br><span class="line"><span class="number">6.</span> 服务端收到fin请求,发送ack(close_wait)</span><br><span class="line"><span class="number">7.</span> 服务端数据交互完成,发送fin请求关闭连接(last_ack)</span><br><span class="line"><span class="number">8.</span> 客户端收到服务端的ack请求(fin_wait_2)</span><br><span class="line"><span class="number">9.</span> 客户端收到服务端的fin请求,发送ack确认断开(time_wait)</span><br><span class="line"><span class="number">10.</span> 服务端收到客户端的ack,关闭连接(close)</span><br><span class="line"><span class="number">11.</span> 客户端维护<span class="number">2</span>个msl时间后回收socket</span><br></pre></td></tr></table></figure><p>引用网上的一张图：</p><p><img src="/images/img_5a66a577176c8.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;TCP状态分析&quot;&gt;&lt;a href=&quot;#TCP状态分析&quot; class=&quot;headerlink&quot; title=&quot;TCP状态分析&quot;&gt;&lt;/a&gt;TCP状态分析&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;listen／close&lt;/li&gt;
&lt;li&gt;syn-sent/syn-revd&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="linux" scheme="https://www.xiemx.com/categories/linux/"/>
    
    
      <category term="linux" scheme="https://www.xiemx.com/tags/linux/"/>
    
      <category term="tcp" scheme="https://www.xiemx.com/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>TCP TIME_WAIT</title>
    <link href="https://www.xiemx.com//2018/01/23/tcp-time_wait/"/>
    <id>https://www.xiemx.com//2018/01/23/tcp-time_wait/</id>
    <published>2018-01-23T02:01:21.000Z</published>
    <updated>2019-10-19T07:40:03.304Z</updated>
    
    <content type="html"><![CDATA[<h4 id="维持TIME-WAIT有两个原因："><a href="#维持TIME-WAIT有两个原因：" class="headerlink" title="维持TIME_WAIT有两个原因："></a>维持TIME_WAIT有两个原因：</h4><ol><li><p>可靠地实现TCP的全双工连接终止</p><p> 在四次挥手中，假设最后的ACK丢失了，被动关闭方会重发FIN。主动关闭端必须维护状态，来允许被动关闭方重发最后的ACK；如果它没有维护这个状态，将会对重发FIN返回RST，被动关闭方会认为这是个错误。如果TCP正在执行彻底终止数据流的两个方向所需的所有工作（即全双工关闭），则必须正确处理这四个段中任何一个的丢失。所以执行主动关闭的一方必须在结束时保持TIME_WAIT状态：因为它可能必须重传最后的ACK。</p></li><li><p>允许旧的重复数据段在网络中过期</p><p> 假设在主机1.1.1.1的1111端口和2.2.2.2的2222端口之间有一个TCP连接。此连接关闭后，相同的地址和端口建立了一个新连接。由于IP地址和端口相同，TCP必须防止旧连接的数据包再次出现，被新的连接误收。为此，TCP将不会启动当前处于TIME_WAIT状态的连接。由于TIME_WAIT状态的持续时间是两倍的MSL，因此TCP允许一个方向的数据在MSL秒内丢失，也允许回复在一个MSL秒内丢失。通过此规则来保证当一个TCP连接成功建立时，来自先前连接的所有旧的副本在网络中已过期。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;维持TIME-WAIT有两个原因：&quot;&gt;&lt;a href=&quot;#维持TIME-WAIT有两个原因：&quot; class=&quot;headerlink&quot; title=&quot;维持TIME_WAIT有两个原因：&quot;&gt;&lt;/a&gt;维持TIME_WAIT有两个原因：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;可
      
    
    </summary>
    
    
      <category term="linux" scheme="https://www.xiemx.com/categories/linux/"/>
    
    
      <category term="linux" scheme="https://www.xiemx.com/tags/linux/"/>
    
      <category term="tcp" scheme="https://www.xiemx.com/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>zabbix distrubuted monitor</title>
    <link href="https://www.xiemx.com//2017/09/21/zabbix-distrubuted-monitor/"/>
    <id>https://www.xiemx.com//2017/09/21/zabbix-distrubuted-monitor/</id>
    <published>2017-09-20T18:09:37.000Z</published>
    <updated>2019-10-21T06:57:42.570Z</updated>
    
    <content type="html"><![CDATA[<p>zabbix 分布式监控2种模式</p><ul><li>node模式</li><li>proxy模式</li></ul><p>PS: node模式官方在2.4版本之后已经弃用，重点讨论proxy模式</p><h3 id="proxy-模式"><a href="#proxy-模式" class="headerlink" title="proxy 模式"></a>proxy 模式</h3><p>Zabbix proxy可以代替Zabbix服务器收集性能和可用性数据，一个代理可以承担一些收集数据的负载。使用代理是实现集中式和分布式监控的最简单方法。proxy需要使用单独的数据库来缓存agent数据，在发给server防止出现因网络问题造成的数据丢失。zabbix proxy只是一个数据收集组件，不会触发任何trigger／alert.</p><p><img src="/images/img_59c35cd9ab71b.png" alt="img"></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>Monitor remote locations</li><li>Monitor locations having unreliable communications</li><li>Offload the Zabbix server when monitoring thousands of devices</li><li>Simplify the maintenance of distributed monitoring</li></ul><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">同安装zabbix server 类似，不赘述,需要其他功能也可以在编译时自行开启。</span></span><br><span class="line"></span><br><span class="line">./configure --prefix=/opt/zabbix_proxy/ --enable-proxy --with-mysql --with-libcurl</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">create databases zabbix</span><br><span class="line">grant all to zabbix.* to zabbix@'%' identified by "zabbix";</span><br><span class="line"><span class="meta">#</span><span class="bash">导入schema.sql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置文件中hostname需要和zabbix上添加的保持一致</span></span><br><span class="line"><span class="meta">#</span><span class="bash">其它参考server设置参数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">ps：设置适当的配置同步时间，默认一小时。建议设置短一点，这样如果有新机器加入配置修改都可以快速同步并监控。</span></span><br><span class="line">ConfigFrequency=600</span><br></pre></td></tr></table></figure><p>zabbix server 配置</p><p><img src="/images/img_59c35d1d930c1.png" alt="img"></p><p>添加主机时选择指定的proxy</p><p><img src="/images/img_59c35d389b1c5.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;zabbix 分布式监控2种模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;node模式&lt;/li&gt;
&lt;li&gt;proxy模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PS: node模式官方在2.4版本之后已经弃用，重点讨论proxy模式&lt;/p&gt;
&lt;h3 id=&quot;proxy-模式&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="zabbix" scheme="https://www.xiemx.com/categories/zabbix/"/>
    
    
      <category term="zabbix" scheme="https://www.xiemx.com/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>graphite_relay sharding</title>
    <link href="https://www.xiemx.com//2017/09/08/graphite_relay-sharding/"/>
    <id>https://www.xiemx.com//2017/09/08/graphite_relay-sharding/</id>
    <published>2017-09-07T22:09:47.000Z</published>
    <updated>2019-10-21T06:57:43.060Z</updated>
    
    <content type="html"><![CDATA[<p>当statsd发送超量的metrics到graphite中，graphite单节点无法负载的情况，可以使用consistent-hashing的模式来将数据分片到backend中。同样的consistent-hashing模式下可以自动剔除／加入节点。</p><p>官方文档：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">carbon-relay.py serves two distinct purposes: replication and sharding.</span><br><span class="line"></span><br><span class="line">When running <span class="keyword">with</span> RELAY_METHOD = <span class="keyword">rules</span>, a carbon-relay.py <span class="keyword">instance</span> can run <span class="keyword">in</span> place <span class="keyword">of</span> a carbon-cache.py <span class="keyword">server</span> <span class="keyword">and</span> relay <span class="keyword">all</span> incoming metrics <span class="keyword">to</span> multiple backend carbon-cache.py‘s running <span class="keyword">on</span> different ports <span class="keyword">or</span> hosts.</span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> RELAY_METHOD = <span class="keyword">consistent</span>-hashing <span class="keyword">mode</span>, a DESTINATIONS setting defines a sharding strategy across multiple carbon-cache.py backends. The same <span class="keyword">consistent</span> hashing <span class="keyword">list</span> can be provided <span class="keyword">to</span> the graphite webapp via CARBONLINK_HOSTS <span class="keyword">to</span> spread <span class="keyword">reads</span> across the multiple backends.</span><br><span class="line">本例模拟一个双后端的carbon-<span class="keyword">cache</span> instance.单机器运行,使用carbon-cache.py 的<span class="keyword">instance</span>功能</span><br><span class="line"></span><br><span class="line">config文件：</span><br><span class="line"><span class="comment">#####carbon.conf</span></span><br><span class="line">[<span class="keyword">cache</span>:a]</span><br><span class="line">LINE_RECEIVER_PORT = <span class="number">2203</span></span><br><span class="line">PICKLE_RECEIVER_PORT = <span class="number">2204</span></span><br><span class="line">CACHE_QUERY_PORT = <span class="number">7102</span></span><br><span class="line">LOCAL_DATA_DIR = /opt/graphite/<span class="keyword">storage</span>/whisper_a/</span><br><span class="line">[<span class="keyword">cache</span>:b]</span><br><span class="line">LINE_RECEIVER_PORT = <span class="number">2205</span></span><br><span class="line">PICKLE_RECEIVER_PORT = <span class="number">2206</span></span><br><span class="line">CACHE_QUERY_PORT = <span class="number">7202</span></span><br><span class="line">LOCAL_DATA_DIR = /opt/graphite/<span class="keyword">storage</span>/whisper_b/</span><br><span class="line">[relay]</span><br><span class="line">LINE_RECEIVER_INTERFACE = <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">LINE_RECEIVER_PORT = <span class="number">2003</span></span><br><span class="line">PICKLE_RECEIVER_INTERFACE = <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">PICKLE_RECEIVER_PORT = <span class="number">2004</span></span><br><span class="line">DESTINATIONS = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2204</span>:a, <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2206</span>:b </span><br><span class="line">启动服务：</span><br><span class="line"></span><br><span class="line">启动<span class="keyword">instance</span>:a</span><br><span class="line">xmx@xiemx-<span class="keyword">test</span>:/opt/graphisudo ./carbon-cache.py <span class="comment">--instance=a --config=/opt/graphite/conf/carbon.conf start</span></span><br><span class="line"><span class="keyword">Starting</span> carbon-<span class="keyword">cache</span> (<span class="keyword">instance</span> a)</span><br><span class="line"></span><br><span class="line">启动<span class="keyword">instance</span>:b</span><br><span class="line">xmx@xiemx-<span class="keyword">test</span>:/opt/graphite/<span class="keyword">bin</span>$ sudo ./carbon-cache.py <span class="comment">--instance=b --config=/opt/graphite/conf/carbon.conf start</span></span><br><span class="line"><span class="keyword">Starting</span> carbon-<span class="keyword">cache</span> (<span class="keyword">instance</span> b)</span><br><span class="line"></span><br><span class="line">启动relay:</span><br><span class="line">xmx@xiemx-<span class="keyword">test</span>:/opt/graphite/conf$ sudo /opt/graphite/<span class="keyword">bin</span>/carbon-relay.py <span class="comment">--debug --config=/opt/graphite/conf/carbon.conf start</span></span><br><span class="line"><span class="keyword">Starting</span> carbon-relay (<span class="keyword">instance</span> a)</span><br><span class="line"><span class="number">08</span>/<span class="number">09</span>/<span class="number">2017</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">16</span> :: [console] <span class="keyword">Using</span> sorted write strategy <span class="keyword">for</span> <span class="keyword">cache</span></span><br><span class="line"><span class="number">08</span>/<span class="number">09</span>/<span class="number">2017</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">16</span> :: [clients] connecting <span class="keyword">to</span> carbon daemon <span class="keyword">at</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2204</span>:a</span><br><span class="line"><span class="number">08</span>/<span class="number">09</span>/<span class="number">2017</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">16</span> :: [clients] connecting <span class="keyword">to</span> carbon daemon <span class="keyword">at</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2206</span>:b</span><br><span class="line"><span class="number">08</span>/<span class="number">09</span>/<span class="number">2017</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">16</span> :: [console] twistd <span class="number">16.4</span><span class="number">.1</span> (/usr/<span class="keyword">bin</span>/python <span class="number">2.7</span><span class="number">.6</span>) <span class="keyword">starting</span> up.</span><br><span class="line"><span class="number">08</span>/<span class="number">09</span>/<span class="number">2017</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">16</span> :: [console] reactor <span class="keyword">class</span>: twisted.internet.epollreactor.EPollReactor.</span><br><span class="line"><span class="number">08</span>/<span class="number">09</span>/<span class="number">2017</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">16</span> :: [console] <span class="keyword">Starting</span> factory CarbonClientFactory(<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2206</span>:b)</span><br><span class="line"><span class="number">08</span>/<span class="number">09</span>/<span class="number">2017</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">16</span> :: [clients] CarbonClientFactory(<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2206</span>:b)::startedConnecting (<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2206</span>)</span><br><span class="line"><span class="number">08</span>/<span class="number">09</span>/<span class="number">2017</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">16</span> :: [console] <span class="keyword">Starting</span> factory CarbonClientFactory(<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2204</span>:a)</span><br><span class="line"><span class="number">08</span>/<span class="number">09</span>/<span class="number">2017</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">16</span> :: [clients] CarbonClientFactory(<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2204</span>:a)::startedConnecting (<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2204</span>)</span><br><span class="line"><span class="number">08</span>/<span class="number">09</span>/<span class="number">2017</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">16</span> :: [console] CarbonReceiverFactory <span class="keyword">starting</span> <span class="keyword">on</span> <span class="number">2003</span></span><br><span class="line"><span class="number">08</span>/<span class="number">09</span>/<span class="number">2017</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">16</span> :: [console] <span class="keyword">Starting</span> factory </span><br><span class="line"><span class="number">08</span>/<span class="number">09</span>/<span class="number">2017</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">16</span> :: [console] CarbonReceiverFactory <span class="keyword">starting</span> <span class="keyword">on</span> <span class="number">2004</span></span><br><span class="line"><span class="number">08</span>/<span class="number">09</span>/<span class="number">2017</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">16</span> :: [console] <span class="keyword">Starting</span> factory </span><br><span class="line"><span class="number">08</span>/<span class="number">09</span>/<span class="number">2017</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">16</span> :: [clients] CarbonClientProtocol(<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2206</span>:b)::connectionMade</span><br><span class="line"><span class="number">08</span>/<span class="number">09</span>/<span class="number">2017</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">16</span> :: [clients] CarbonClientFactory(<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2206</span>:b)::connectionMade (CarbonClientProtocol(<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2206</span>:b))</span><br><span class="line"><span class="number">08</span>/<span class="number">09</span>/<span class="number">2017</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">16</span> :: [clients] Destination <span class="keyword">is</span> up: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2206</span>:b</span><br><span class="line"><span class="number">08</span>/<span class="number">09</span>/<span class="number">2017</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">16</span> :: [clients] CarbonClientProtocol(<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2204</span>:a)::connectionMade</span><br><span class="line"><span class="number">08</span>/<span class="number">09</span>/<span class="number">2017</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">16</span> :: [clients] CarbonClientFactory(<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2204</span>:a)::connectionMade (CarbonClientProtocol(<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2204</span>:a))</span><br><span class="line"><span class="number">08</span>/<span class="number">09</span>/<span class="number">2017</span> <span class="number">16</span>:<span class="number">02</span>:<span class="number">16</span> :: [clients] Destination <span class="keyword">is</span> up: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2204</span>:a</span><br></pre></td></tr></table></figure><p>测试：</p><p>模拟5个客户端同时发送100个key</p><p><img src="/images/img_59b26b3126991.png" alt="img"></p><p><img src="/images/img_59b26b4437729.png" alt="img"></p><p>模拟node掉线重连</p><p><img src="/images/img_59b26b60dc7e7.png" alt="img"></p><p>graphite-web数据聚合展示</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修改local_settings.py</span><br><span class="line">CARBONLINK_HOSTS = [<span class="string">"127.0.0.1:7102:a"</span>, <span class="string">"127.0.0.1:7202:b"</span>]</span><br><span class="line"></span><br><span class="line">启动django</span><br><span class="line">sudo PYTHONPATH=/opt/graphite/webapp django-admin<span class="selector-class">.py</span> runserver <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">5000</span> --settings</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当statsd发送超量的metrics到graphite中，graphite单节点无法负载的情况，可以使用consistent-hashing的模式来将数据分片到backend中。同样的consistent-hashing模式下可以自动剔除／加入节点。&lt;/p&gt;
&lt;p&gt;官方文
      
    
    </summary>
    
    
      <category term="statsd" scheme="https://www.xiemx.com/categories/statsd/"/>
    
      <category term="graphite" scheme="https://www.xiemx.com/categories/statsd/graphite/"/>
    
    
  </entry>
  
</feed>
